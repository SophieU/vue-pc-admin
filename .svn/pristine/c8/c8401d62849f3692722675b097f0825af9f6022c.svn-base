{"version":3,"sources":["webpack:///src/pages/system/tips-admin.vue","webpack:///./src/pages/system/tips-admin.vue?11db","webpack:///./src/pages/system/tips-admin.vue","webpack:///./node_modules/wangeditor/release/wangEditor.js"],"names":["tips_admin","name","data","serviceTime","serviceFee","other","editor1","editor2","editor3","methods","getTips","_this","this","$http","get","then","res","code","config","wangEditor_default","a","customConfig","menus","create","txt","html","$Message","error","save","_this2","post","success","msg","cancel","mounted","system_tips_admin","render","_vm","_h","$createElement","_c","_self","staticClass","attrs","slot","_v","staticStyle","margin-top","on","click","type","id","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","factory","isDOMList","selector","HTMLCollection","NodeList","eventList","DomElement","div","nodeType","selectorResult","Array","replace","trim","indexOf","document","createElement","innerHTML","children","result","querySelectorAll","length","i","$","prototype","constructor","forEach","fn","elem","call","clone","deep","cloneList","push","cloneNode","index","first","last","types","split","addEventListener","e","target","matches","off","removeEventListener","attr","key","val","getAttribute","setAttribute","addClass","className","arr","filter","item","join","removeClass","css","currentStyle","style","resultArr","map","show","hide","childNodes","append","$children","child","appendChild","remove","parent","parentElement","removeChild","isContain","$child","contains","getSizeData","getBoundingClientRect","getNodeName","nodeName","find","text","value","focus","parentUntil","_currentElem","results","equal","$elem","insertBefore","referenceNode","parentNode","insertAfter","lastChild","nextSibling","offAll","fontNames","colors","emotions","title","content","alt","src","zIndex","debug","linkCheck","link","linkImgCheck","pasteFilterStyle","pasteIgnoreImg","pasteTextHandle","showLinkImg","linkImgCallback","url","uploadImgMaxSize","uploadImgShowBase64","uploadFileName","uploadImgParams","uploadImgHeaders","withCredentials","uploadImgTimeout","uploadImgHooks","before","xhr","editor","files","fail","timeout","qiniu","UA","_ua","navigator","userAgent","isWebkit","test","isIE","window","objForEach","obj","hasOwnProperty","arrForEach","fakeArr","getRandom","prefix","Math","random","toString","slice","replaceHtmlSymbol","isFunction","Bold","_active","onClick","isSeleEmpty","selection","isSelectionEmpty","createEmptyRange","cmd","do","collapseRange","restoreSelection","tryChangeActive","queryCommandState","replaceLang","str","langArgs","reg","_emptyFn","DropList","menu","opt","$container","$title","titleHtml","list","$list","elemHtml","$li","hideTimeoutId","setTimeout","_rendered","_show","Head","droplist","width","_command","FontSize","FontName","fontName","clearTimeout","$menuELem","menuHeight","height","showTimeoutId","$selectionElem","getSelectionContainerElem","$textElem","cmdValue","queryCommandValue","emptyFn","_isCreatedPanelMenus","Panel","Link","Italic","Redo","StrikeThrough","Underline","Undo","List","Justify","ForeColor","color","BackColor","Quote","Code","Emoticon","Table","Video","Image","imgMenuId","$body","$textContainerElem","$closeBtn","$tabTitleContainer","$tabContentContainer","tabs","tabTitleArr","tabContentArr","tab","tabIndex","tpl","$content","_index","stopPropagation","events","event","$inputs","_hideOtherPanels","panel","$linkelem","createRangeByElem","_createPanel","getSelectionText","inputLinkId","inputTextId","btnOkId","btnDelId","delBtnDisplay","$link","$text","_insertLink","_delLink","selectionText","checkResult","alert","$selectionELem","$parent","$startElem","getSelectionStartElem","$endElem","getSelectionEndElem","$code","textId","btnId","_insertCode","_updateCode","$parentElem","tabConfig","emotData","emotType","faceHtml","$target","insertHtml","_insert","emotHtml","_createEditPanel","_createInsertPanel","btnInsertId","textRowNum","textColNum","rowNum","parseInt","colNum","r","c","addRowBtnId","addColBtnId","delRowBtnId","delColBtnId","delTableBtnId","_addRow","_addCol","_delRow","_delCol","_delTable","_getLocationData","$tr","$tds","tdLength","td","$trs","trLength","tr","locationData","$currentTr","newTr","trData","tdIndex","$currentTd","toLowerCase","$table","textValId","width30","width50","width100","delBtn","$img","_selectedImg","uploadImg","upTriggerId","upFileId","linkUrlId","linkBtnId","tabsConfig","fileElem","fileList","insertLinkImg","tabsConfigResult","uploadImgServer","customUploadImg","FileReader","MenuConstructors","Menus","getPasteText","clipboardData","originalEvent","getData","Text","Command","API","_currentRange","Progress","_time","_isShow","_isRender","_timeoutId","$textContainer","$bar","bold","head","fontSize","italic","redo","strikeThrough","underline","undo","justify","foreColor","backColor","quote","emoticon","table","video","image","init","menuKey","MenuConstructor","_addToToolbar","_bindEvent","$toolbarElem","getRange","changeActive","clear","initSelection","getJSON","getChildrenJSON","curElem","elemResult","textContent","tag","attrData","attrList","attributes","attrListLength","_saveRangeRealTime","_enterKeyHandle","_clearHandle","_pasteHandle","_tabHandle","_imgHandle","_dragHandle","saveRange","insertEmptyP","$p","keyCode","selectionNodeName","parentNodeName","queryCommandSupported","_willBreakCode","preventDefault","_startOffset","startOffset","codeLength","codeHandle","txtHtml","ignoreImg","pasteTime","canDo","now","Date","flag","pasteHtml","filterStyle","pasteText","docSplitHtml","getPasteHtml","ex","pasteFiles","items","getAsFile","getPasteImgs","dataTransfer","_useStyleWithCSS","execCommand","_name","_execCommand","change","_insertHTML","range","insertNode","deleteContents","pasteHTML","_insertElem","_range","getSelection","rangeCount","getRangeAt","$containerElem","toStart","collapse","commonAncestorContainer","startContainer","endContainer","endOffset","removeAllRanges","addRange","setEnd","isContent","createRange","selectNodeContents","selectNode","progress","timeoutId","_hide","_typeof","Symbol","iterator","UploadImg","_alert","alertInfo","debugInfo","customAlert","Error","img","onload","callback","onerror","onabort","_this3","maxSize","maxSizeM","maxLength","uploadImgMaxLength","uploadImgParamsWithUrl","hooks","resultFiles","errInfo","file","size","bind","formdata","FormData","uploadImgServerArr","uploadImgServerHash","XMLHttpRequest","open","ontimeout","upload","onprogress","percent","progressBar","lengthComputable","loaded","total","onreadystatechange","readyState","status","responseText","JSON","parse","customInsert","errno","beforeResult","prevent","setRequestHeader","send","reader","readAsDataURL","editorId","Editor","toolbarSelector","textSelector","_initConfig","Object","assign","lang","RegExp","_initDom","$toolbarSelector","config$$1","toolbarElemId","textElemId","compositionEnd","onfocus","onblur","isFocus","isChild","isToolbar","isMenu","_initCommand","_initSelectionAPI","_initUploadImg","_initMenus","_initText","newLine","$last","onChangeTimeoutId","beforeChangeHtml","onchangeTimeout","onchange","currentHtml","_offAllEvent","varArgs","TypeError","to","arguments","nextSource","nextKey","Element","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","ownerDocument","getElementsByTagName","wangEditor","module","exports"],"mappings":"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","file":"static/js/9.c6689a266b9b43c3572e.js","sourcesContent":["<template>\n    <div>\n      <Card class=\"mb-15\">\n        <p slot=\"title\">服务时间提示</p>\n        <div slot=\"extra\">\n          <div class=\"inner-center\" style=\"margin-top: -5px;\">\n            <Button class=\"lang-btn\" @click=\"cancel\">取消</Button>\n            <Button @click=\"save\" class=\"lang-btn\" type=\"primary\">保存</Button>\n          </div>\n        </div>\n        <div>\n          <div id=\"serveTime\"></div>\n          <!--<Input v-model=\"serviceTime\" type=\"textarea\" :rows=\"5\"/>-->\n        </div>\n      </Card>\n      <Card class=\"mb-15\">\n        <p slot=\"title\">服务费用提示</p>\n        <div>\n          <div id=\"serveFee\"> </div>\n          <!--<Input  v-model=\"serviceFee\" type=\"textarea\" :rows=\"5\"/>-->\n        </div>\n      </Card>\n      <Card class=\"mb-15\">\n        <p slot=\"title\">其他提示</p>\n        <div>\n          <div id=\"otherTips\"> </div>\n          <!--<Input  v-model=\"other\" type=\"textarea\" :rows=\"5\"/>-->\n        </div>\n      </Card>\n      <Card>\n\n      </Card>\n    </div>\n</template>\n\n<script>\n  import E from 'wangeditor';\n    export default {\n        name: \"tips-admin\",\n      data(){\n        return {\n          serviceTime:'',\n          serviceFee:'',\n          other:'',\n          editor1:{},\n          editor2:{},\n          editor3:{}\n        }\n      },\n      methods:{\n          getTips(){\n            this.$http.get('/repair/reminder/info')\n              .then(res=>{\n                if(res.data.code===0){\n                  let data = res.data.data;\n                  let config=[\n                    'head',  // 标题\n                    'bold',  // 粗体\n                    'fontSize',  // 字号\n                    'fontName',  // 字体\n                    'italic',  // 斜体\n                    'underline',  // 下划线\n                    'strikeThrough',  // 删除线\n                    'foreColor',  // 文字颜色\n                    'backColor',  // 背景颜色\n                    'link',  // 插入链接\n                    'list',  // 列表\n                    'justify',  // 对齐方式\n                    'emoticon',  // 表情\n                    'undo',  // 撤销\n                    'redo'  // 重复\n                  ]\n                  this.editor1 = new E('#serveTime');\n                  let editor1 = this.editor1;\n                  editor1.customConfig.menus =config;\n                  editor1.create();\n                  editor1.txt.html(data.serviceTime);\n\n                  this.editor2 = new E('#serveFee');\n                  let editor2 = this.editor2;\n                  editor2.customConfig.menus =config;\n                  editor2.create();\n                  editor2.txt.html(data.serviceFee);\n\n                   this.editor3 = new E('#otherTips');\n                  let editor3 = this.editor3;\n                  editor3.customConfig.menus =config;\n                  editor3.create();\n                  editor3.txt.html(data.other);\n\n                  this.serviceTime=data.serviceTime;\n                  this.serviceFee=data.serviceFee;\n                  this.other=data.other;\n                }else{\n                  this.$Message.error('获取信息失败')\n                }\n              })\n          },\n        save(){\n            let serviceTime = this.editor1.txt.html();\n            let serviceFee = this.editor2.txt.html();\n            let other = this.editor3.txt.html();\n            // let params = {\n            //   serviceTime:serviceTime,\n            //   serviceFee:serviceFee,\n            //   other:other\n            // };\n            this.$http.post(`/repair/reminder/save`,{\n              serviceTime:serviceTime,\n              serviceFee:serviceFee,\n              other:other\n            }).then(res=>{\n              if(res.data.code===0){\n                this.$Message.success('保存成功');\n                this.getTips();\n              }else{\n                this.$Message.error(res.data.msg);\n              }\n            })\n        },\n        cancel(){\n            this.getTips();\n        },\n\n      },\n      mounted(){\n        this.getTips();\n      }\n    }\n</script>\n\n<style scoped>\n  .inner-center{\n    text-align: center;\n  }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/pages/system/tips-admin.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('Card',{staticClass:\"mb-15\"},[_c('p',{attrs:{\"slot\":\"title\"},slot:\"title\"},[_vm._v(\"服务时间提示\")]),_vm._v(\" \"),_c('div',{attrs:{\"slot\":\"extra\"},slot:\"extra\"},[_c('div',{staticClass:\"inner-center\",staticStyle:{\"margin-top\":\"-5px\"}},[_c('Button',{staticClass:\"lang-btn\",on:{\"click\":_vm.cancel}},[_vm._v(\"取消\")]),_vm._v(\" \"),_c('Button',{staticClass:\"lang-btn\",attrs:{\"type\":\"primary\"},on:{\"click\":_vm.save}},[_vm._v(\"保存\")])],1)]),_vm._v(\" \"),_c('div',[_c('div',{attrs:{\"id\":\"serveTime\"}})])]),_vm._v(\" \"),_c('Card',{staticClass:\"mb-15\"},[_c('p',{attrs:{\"slot\":\"title\"},slot:\"title\"},[_vm._v(\"服务费用提示\")]),_vm._v(\" \"),_c('div',[_c('div',{attrs:{\"id\":\"serveFee\"}})])]),_vm._v(\" \"),_c('Card',{staticClass:\"mb-15\"},[_c('p',{attrs:{\"slot\":\"title\"},slot:\"title\"},[_vm._v(\"其他提示\")]),_vm._v(\" \"),_c('div',[_c('div',{attrs:{\"id\":\"otherTips\"}})])]),_vm._v(\" \"),_c('Card')],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-559ddfa3\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/pages/system/tips-admin.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-559ddfa3\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./tips-admin.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./tips-admin.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./tips-admin.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-559ddfa3\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./tips-admin.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-559ddfa3\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/system/tips-admin.vue\n// module id = null\n// module chunks = ","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.wangEditor = factory());\n}(this, (function () { 'use strict';\n\n/*\n    poly-fill\n*/\n\nvar polyfill = function () {\n\n    // Object.assign\n    if (typeof Object.assign != 'function') {\n        Object.assign = function (target, varArgs) {\n            // .length of function is 2\n            if (target == null) {\n                // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) {\n                    // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        };\n    }\n\n    // IE 中兼容 Element.prototype.matches\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n    }\n};\n\n/*\n    DOM 操作 API\n*/\n\n// 根据 html 代码片段创建 dom 对象\nfunction createElemByHTML(html) {\n    var div = void 0;\n    div = document.createElement('div');\n    div.innerHTML = html;\n    return div.children;\n}\n\n// 是否是 DOM List\nfunction isDOMList(selector) {\n    if (!selector) {\n        return false;\n    }\n    if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n        return true;\n    }\n    return false;\n}\n\n// 封装 document.querySelectorAll\nfunction querySelectorAll(selector) {\n    var result = document.querySelectorAll(selector);\n    if (isDOMList(result)) {\n        return result;\n    } else {\n        return [result];\n    }\n}\n\n// 记录所有的事件绑定\nvar eventList = [];\n\n// 创建构造函数\nfunction DomElement(selector) {\n    if (!selector) {\n        return;\n    }\n\n    // selector 本来就是 DomElement 对象，直接返回\n    if (selector instanceof DomElement) {\n        return selector;\n    }\n\n    this.selector = selector;\n    var nodeType = selector.nodeType;\n\n    // 根据 selector 得出的结果（如 DOM，DOM List）\n    var selectorResult = [];\n    if (nodeType === 9) {\n        // document 节点\n        selectorResult = [selector];\n    } else if (nodeType === 1) {\n        // 单个 DOM 节点\n        selectorResult = [selector];\n    } else if (isDOMList(selector) || selector instanceof Array) {\n        // DOM List 或者数组\n        selectorResult = selector;\n    } else if (typeof selector === 'string') {\n        // 字符串\n        selector = selector.replace('/\\n/mg', '').trim();\n        if (selector.indexOf('<') === 0) {\n            // 如 <div>\n            selectorResult = createElemByHTML(selector);\n        } else {\n            // 如 #id .class\n            selectorResult = querySelectorAll(selector);\n        }\n    }\n\n    var length = selectorResult.length;\n    if (!length) {\n        // 空数组\n        return this;\n    }\n\n    // 加入 DOM 节点\n    var i = void 0;\n    for (i = 0; i < length; i++) {\n        this[i] = selectorResult[i];\n    }\n    this.length = length;\n}\n\n// 修改原型\nDomElement.prototype = {\n    constructor: DomElement,\n\n    // 类数组，forEach\n    forEach: function forEach(fn) {\n        var i = void 0;\n        for (i = 0; i < this.length; i++) {\n            var elem = this[i];\n            var result = fn.call(elem, elem, i);\n            if (result === false) {\n                break;\n            }\n        }\n        return this;\n    },\n\n    // clone\n    clone: function clone(deep) {\n        var cloneList = [];\n        this.forEach(function (elem) {\n            cloneList.push(elem.cloneNode(!!deep));\n        });\n        return $(cloneList);\n    },\n\n    // 获取第几个元素\n    get: function get(index) {\n        var length = this.length;\n        if (index >= length) {\n            index = index % length;\n        }\n        return $(this[index]);\n    },\n\n    // 第一个\n    first: function first() {\n        return this.get(0);\n    },\n\n    // 最后一个\n    last: function last() {\n        var length = this.length;\n        return this.get(length - 1);\n    },\n\n    // 绑定事件\n    on: function on(type, selector, fn) {\n        // selector 不为空，证明绑定事件要加代理\n        if (!fn) {\n            fn = selector;\n            selector = null;\n        }\n\n        // type 是否有多个\n        var types = [];\n        types = type.split(/\\s+/);\n\n        return this.forEach(function (elem) {\n            types.forEach(function (type) {\n                if (!type) {\n                    return;\n                }\n\n                // 记录下，方便后面解绑\n                eventList.push({\n                    elem: elem,\n                    type: type,\n                    fn: fn\n                });\n\n                if (!selector) {\n                    // 无代理\n                    elem.addEventListener(type, fn);\n                    return;\n                }\n\n                // 有代理\n                elem.addEventListener(type, function (e) {\n                    var target = e.target;\n                    if (target.matches(selector)) {\n                        fn.call(target, e);\n                    }\n                });\n            });\n        });\n    },\n\n    // 取消事件绑定\n    off: function off(type, fn) {\n        return this.forEach(function (elem) {\n            elem.removeEventListener(type, fn);\n        });\n    },\n\n    // 获取/设置 属性\n    attr: function attr(key, val) {\n        if (val == null) {\n            // 获取值\n            return this[0].getAttribute(key);\n        } else {\n            // 设置值\n            return this.forEach(function (elem) {\n                elem.setAttribute(key, val);\n            });\n        }\n    },\n\n    // 添加 class\n    addClass: function addClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    return !!item.trim();\n                });\n                // 添加 class\n                if (arr.indexOf(className) < 0) {\n                    arr.push(className);\n                }\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            } else {\n                elem.className = className;\n            }\n        });\n    },\n\n    // 删除 class\n    removeClass: function removeClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    item = item.trim();\n                    // 删除 class\n                    if (!item || item === className) {\n                        return false;\n                    }\n                    return true;\n                });\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            }\n        });\n    },\n\n    // 修改 css\n    css: function css(key, val) {\n        var currentStyle = key + ':' + val + ';';\n        return this.forEach(function (elem) {\n            var style = (elem.getAttribute('style') || '').trim();\n            var styleArr = void 0,\n                resultArr = [];\n            if (style) {\n                // 将 style 按照 ; 拆分为数组\n                styleArr = style.split(';');\n                styleArr.forEach(function (item) {\n                    // 对每项样式，按照 : 拆分为 key 和 value\n                    var arr = item.split(':').map(function (i) {\n                        return i.trim();\n                    });\n                    if (arr.length === 2) {\n                        resultArr.push(arr[0] + ':' + arr[1]);\n                    }\n                });\n                // 替换或者新增\n                resultArr = resultArr.map(function (item) {\n                    if (item.indexOf(key) === 0) {\n                        return currentStyle;\n                    } else {\n                        return item;\n                    }\n                });\n                if (resultArr.indexOf(currentStyle) < 0) {\n                    resultArr.push(currentStyle);\n                }\n                // 结果\n                elem.setAttribute('style', resultArr.join('; '));\n            } else {\n                // style 无值\n                elem.setAttribute('style', currentStyle);\n            }\n        });\n    },\n\n    // 显示\n    show: function show() {\n        return this.css('display', 'block');\n    },\n\n    // 隐藏\n    hide: function hide() {\n        return this.css('display', 'none');\n    },\n\n    // 获取子节点\n    children: function children() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.children);\n    },\n\n    // 获取子节点（包括文本节点）\n    childNodes: function childNodes() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.childNodes);\n    },\n\n    // 增加子节点\n    append: function append($children) {\n        return this.forEach(function (elem) {\n            $children.forEach(function (child) {\n                elem.appendChild(child);\n            });\n        });\n    },\n\n    // 移除当前节点\n    remove: function remove() {\n        return this.forEach(function (elem) {\n            if (elem.remove) {\n                elem.remove();\n            } else {\n                var parent = elem.parentElement;\n                parent && parent.removeChild(elem);\n            }\n        });\n    },\n\n    // 是否包含某个子节点\n    isContain: function isContain($child) {\n        var elem = this[0];\n        var child = $child[0];\n        return elem.contains(child);\n    },\n\n    // 尺寸数据\n    getSizeData: function getSizeData() {\n        var elem = this[0];\n        return elem.getBoundingClientRect(); // 可得到 bottom height left right top width 的数据\n    },\n\n    // 封装 nodeName\n    getNodeName: function getNodeName() {\n        var elem = this[0];\n        return elem.nodeName;\n    },\n\n    // 从当前元素查找\n    find: function find(selector) {\n        var elem = this[0];\n        return $(elem.querySelectorAll(selector));\n    },\n\n    // 获取当前元素的 text\n    text: function text(val) {\n        if (!val) {\n            // 获取 text\n            var elem = this[0];\n            return elem.innerHTML.replace(/<.*?>/g, function () {\n                return '';\n            });\n        } else {\n            // 设置 text\n            return this.forEach(function (elem) {\n                elem.innerHTML = val;\n            });\n        }\n    },\n\n    // 获取 html\n    html: function html(value) {\n        var elem = this[0];\n        if (value == null) {\n            return elem.innerHTML;\n        } else {\n            elem.innerHTML = value;\n            return this;\n        }\n    },\n\n    // 获取 value\n    val: function val() {\n        var elem = this[0];\n        return elem.value.trim();\n    },\n\n    // focus\n    focus: function focus() {\n        return this.forEach(function (elem) {\n            elem.focus();\n        });\n    },\n\n    // parent\n    parent: function parent() {\n        var elem = this[0];\n        return $(elem.parentElement);\n    },\n\n    // parentUntil 找到符合 selector 的父节点\n    parentUntil: function parentUntil(selector, _currentElem) {\n        var results = document.querySelectorAll(selector);\n        var length = results.length;\n        if (!length) {\n            // 传入的 selector 无效\n            return null;\n        }\n\n        var elem = _currentElem || this[0];\n        if (elem.nodeName === 'BODY') {\n            return null;\n        }\n\n        var parent = elem.parentElement;\n        var i = void 0;\n        for (i = 0; i < length; i++) {\n            if (parent === results[i]) {\n                // 找到，并返回\n                return $(parent);\n            }\n        }\n\n        // 继续查找\n        return this.parentUntil(selector, parent);\n    },\n\n    // 判断两个 elem 是否相等\n    equal: function equal($elem) {\n        if ($elem.nodeType === 1) {\n            return this[0] === $elem;\n        } else {\n            return this[0] === $elem[0];\n        }\n    },\n\n    // 将该元素插入到某个元素前面\n    insertBefore: function insertBefore(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            parent.insertBefore(elem, referenceNode);\n        });\n    },\n\n    // 将该元素插入到某个元素后面\n    insertAfter: function insertAfter(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            if (parent.lastChild === referenceNode) {\n                // 最后一个元素\n                parent.appendChild(elem);\n            } else {\n                // 不是最后一个元素\n                parent.insertBefore(elem, referenceNode.nextSibling);\n            }\n        });\n    }\n};\n\n// new 一个对象\nfunction $(selector) {\n    return new DomElement(selector);\n}\n\n// 解绑所有事件，用于销毁编辑器\n$.offAll = function () {\n    eventList.forEach(function (item) {\n        var elem = item.elem;\n        var type = item.type;\n        var fn = item.fn;\n        // 解绑\n        elem.removeEventListener(type, fn);\n    });\n};\n\n/*\n    配置信息\n*/\n\nvar config = {\n\n    // 默认菜单配置\n    menus: ['head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'table', 'video', 'code', 'undo', 'redo'],\n\n    fontNames: ['宋体', '微软雅黑', 'Arial', 'Tahoma', 'Verdana'],\n\n    colors: ['#000000', '#eeece0', '#1c487f', '#4d80bf', '#c24f4a', '#8baa4a', '#7b5ba1', '#46acc8', '#f9963b', '#ffffff'],\n\n    // // 语言配置\n    // lang: {\n    //     '设置标题': 'title',\n    //     '正文': 'p',\n    //     '链接文字': 'link text',\n    //     '链接': 'link',\n    //     '插入': 'insert',\n    //     '创建': 'init'\n    // },\n\n    // 表情\n    emotions: [{\n        // tab 的标题\n        title: '默认',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            alt: '[坏笑]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/50/pcmoren_huaixiao_org.png'\n        }, {\n            alt: '[舔屏]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/40/pcmoren_tian_org.png'\n        }, {\n            alt: '[污]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/3c/pcmoren_wu_org.png'\n        }]\n    }, {\n        // tab 的标题\n        title: '新浪',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/7a/shenshou_thumb.gif',\n            alt: '[草泥马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/60/horse2_thumb.gif',\n            alt: '[神马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/bc/fuyun_thumb.gif',\n            alt: '[浮云]'\n        }]\n    }, {\n        // tab 的标题\n        title: 'emoji',\n        // type -> 'emoji' / 'image'\n        type: 'emoji',\n        // content -> 数组\n        content: '😀 😃 😄 😁 😆 😅 😂 😊 😇 🙂 🙃 😉 😓 😪 😴 🙄 🤔 😬 🤐'.split(/\\s/)\n    }],\n\n    // 编辑区域的 z-index\n    zIndex: 10000,\n\n    // 是否开启 debug 模式（debug 模式下错误会 throw error 形式抛出）\n    debug: false,\n\n    // 插入链接时候的格式校验\n    linkCheck: function linkCheck(text, link) {\n        // text 是插入的文字\n        // link 是插入的链接\n        return true; // 返回 true 即表示成功\n        // return '校验失败' // 返回字符串即表示失败的提示信息\n    },\n\n    // 插入网络图片的校验\n    linkImgCheck: function linkImgCheck(src) {\n        // src 即图片的地址\n        return true; // 返回 true 即表示成功\n        // return '校验失败'  // 返回字符串即表示失败的提示信息\n    },\n\n    // 粘贴过滤样式，默认开启\n    pasteFilterStyle: true,\n\n    // 粘贴内容时，忽略图片。默认关闭\n    pasteIgnoreImg: false,\n\n    // 对粘贴的文字进行自定义处理，返回处理后的结果。编辑器会将处理后的结果粘贴到编辑区域中。\n    // IE 暂时不支持\n    pasteTextHandle: function pasteTextHandle(content) {\n        // content 即粘贴过来的内容（html 或 纯文本），可进行自定义处理然后返回\n        return content;\n    },\n\n    // onchange 事件\n    // onchange: function (html) {\n    //     // html 即变化之后的内容\n    //     console.log(html)\n    // },\n\n    // 是否显示添加网络图片的 tab\n    showLinkImg: true,\n\n    // 插入网络图片的回调\n    linkImgCallback: function linkImgCallback(url) {\n        // console.log(url)  // url 即插入图片的地址\n    },\n\n    // 默认上传图片 max size: 5M\n    uploadImgMaxSize: 5 * 1024 * 1024,\n\n    // 配置一次最多上传几个图片\n    // uploadImgMaxLength: 5,\n\n    // 上传图片，是否显示 base64 格式\n    uploadImgShowBase64: false,\n\n    // 上传图片，server 地址（如果有值，则 base64 格式的配置则失效）\n    // uploadImgServer: '/upload',\n\n    // 自定义配置 filename\n    uploadFileName: '',\n\n    // 上传图片的自定义参数\n    uploadImgParams: {\n        // token: 'abcdef12345'\n    },\n\n    // 上传图片的自定义header\n    uploadImgHeaders: {\n        // 'Accept': 'text/x-json'\n    },\n\n    // 配置 XHR withCredentials\n    withCredentials: false,\n\n    // 自定义上传图片超时时间 ms\n    uploadImgTimeout: 10000,\n\n    // 上传图片 hook \n    uploadImgHooks: {\n        // customInsert: function (insertLinkImg, result, editor) {\n        //     console.log('customInsert')\n        //     // 图片上传并返回结果，自定义插入图片的事件，而不是编辑器自动插入图片\n        //     const data = result.data1 || []\n        //     data.forEach(link => {\n        //         insertLinkImg(link)\n        //     })\n        // },\n        before: function before(xhr, editor, files) {\n            // 图片上传之前触发\n\n            // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n            // return {\n            //     prevent: true,\n            //     msg: '放弃上传'\n            // }\n        },\n        success: function success(xhr, editor, result) {\n            // 图片上传并返回结果，图片插入成功之后触发\n        },\n        fail: function fail(xhr, editor, result) {\n            // 图片上传并返回结果，但图片插入错误时触发\n        },\n        error: function error(xhr, editor) {\n            // 图片上传出错时触发\n        },\n        timeout: function timeout(xhr, editor) {\n            // 图片上传超时时触发\n        }\n    },\n\n    // 是否上传七牛云，默认为 false\n    qiniu: false\n\n};\n\n/*\n    工具\n*/\n\n// 和 UA 相关的属性\nvar UA = {\n    _ua: navigator.userAgent,\n\n    // 是否 webkit\n    isWebkit: function isWebkit() {\n        var reg = /webkit/i;\n        return reg.test(this._ua);\n    },\n\n    // 是否 IE\n    isIE: function isIE() {\n        return 'ActiveXObject' in window;\n    }\n};\n\n// 遍历对象\nfunction objForEach(obj, fn) {\n    var key = void 0,\n        result = void 0;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result = fn.call(obj, key, obj[key]);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n}\n\n// 遍历类数组\nfunction arrForEach(fakeArr, fn) {\n    var i = void 0,\n        item = void 0,\n        result = void 0;\n    var length = fakeArr.length || 0;\n    for (i = 0; i < length; i++) {\n        item = fakeArr[i];\n        result = fn.call(fakeArr, item, i);\n        if (result === false) {\n            break;\n        }\n    }\n}\n\n// 获取随机数\nfunction getRandom(prefix) {\n    return prefix + Math.random().toString().slice(2);\n}\n\n// 替换 html 特殊字符\nfunction replaceHtmlSymbol(html) {\n    if (html == null) {\n        return '';\n    }\n    return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;').replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\n}\n\n// 返回百分比的格式\n\n\n// 判断是不是 function\nfunction isFunction(fn) {\n    return typeof fn === 'function';\n}\n\n/*\n    bold-menu\n*/\n// 构造函数\nfunction Bold(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-bold\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nBold.prototype = {\n    constructor: Bold,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 bold 命令\n        editor.cmd.do('bold');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('bold')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    替换多语言\n */\n\nvar replaceLang = function (editor, str) {\n    var langArgs = editor.config.langArgs || [];\n    var result = str;\n\n    langArgs.forEach(function (item) {\n        var reg = item.reg;\n        var val = item.val;\n\n        if (reg.test(result)) {\n            result = result.replace(reg, function () {\n                return val;\n            });\n        }\n    });\n\n    return result;\n};\n\n/*\n    droplist\n*/\nvar _emptyFn = function _emptyFn() {};\n\n// 构造函数\nfunction DropList(menu, opt) {\n    var _this = this;\n\n    // droplist 所依附的菜单\n    var editor = menu.editor;\n    this.menu = menu;\n    this.opt = opt;\n    // 容器\n    var $container = $('<div class=\"w-e-droplist\"></div>');\n\n    // 标题\n    var $title = opt.$title;\n    var titleHtml = void 0;\n    if ($title) {\n        // 替换多语言\n        titleHtml = $title.html();\n        titleHtml = replaceLang(editor, titleHtml);\n        $title.html(titleHtml);\n\n        $title.addClass('w-e-dp-title');\n        $container.append($title);\n    }\n\n    var list = opt.list || [];\n    var type = opt.type || 'list'; // 'list' 列表形式（如“标题”菜单） / 'inline-block' 块状形式（如“颜色”菜单）\n    var onClick = opt.onClick || _emptyFn;\n\n    // 加入 DOM 并绑定事件\n    var $list = $('<ul class=\"' + (type === 'list' ? 'w-e-list' : 'w-e-block') + '\"></ul>');\n    $container.append($list);\n    list.forEach(function (item) {\n        var $elem = item.$elem;\n\n        // 替换多语言\n        var elemHtml = $elem.html();\n        elemHtml = replaceLang(editor, elemHtml);\n        $elem.html(elemHtml);\n\n        var value = item.value;\n        var $li = $('<li class=\"w-e-item\"></li>');\n        if ($elem) {\n            $li.append($elem);\n            $list.append($li);\n            $li.on('click', function (e) {\n                onClick(value);\n\n                // 隐藏\n                _this.hideTimeoutId = setTimeout(function () {\n                    _this.hide();\n                }, 0);\n            });\n        }\n    });\n\n    // 绑定隐藏事件\n    $container.on('mouseleave', function (e) {\n        _this.hideTimeoutId = setTimeout(function () {\n            _this.hide();\n        }, 0);\n    });\n\n    // 记录属性\n    this.$container = $container;\n\n    // 基本属性\n    this._rendered = false;\n    this._show = false;\n}\n\n// 原型\nDropList.prototype = {\n    constructor: DropList,\n\n    // 显示（插入DOM）\n    show: function show() {\n        if (this.hideTimeoutId) {\n            // 清除之前的定时隐藏\n            clearTimeout(this.hideTimeoutId);\n        }\n\n        var menu = this.menu;\n        var $menuELem = menu.$elem;\n        var $container = this.$container;\n        if (this._show) {\n            return;\n        }\n        if (this._rendered) {\n            // 显示\n            $container.show();\n        } else {\n            // 加入 DOM 之前先定位位置\n            var menuHeight = $menuELem.getSizeData().height || 0;\n            var width = this.opt.width || 100; // 默认为 100\n            $container.css('margin-top', menuHeight + 'px').css('width', width + 'px');\n\n            // 加入到 DOM\n            $menuELem.append($container);\n            this._rendered = true;\n        }\n\n        // 修改属性\n        this._show = true;\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        if (this.showTimeoutId) {\n            // 清除之前的定时显示\n            clearTimeout(this.showTimeoutId);\n        }\n\n        var $container = this.$container;\n        if (!this._show) {\n            return;\n        }\n        // 隐藏并需改属性\n        $container.hide();\n        this._show = false;\n    }\n};\n\n/*\n    menu - header\n*/\n// 构造函数\nfunction Head(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-header\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>设置标题</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<h1>H1</h1>'), value: '<h1>' }, { $elem: $('<h2>H2</h2>'), value: '<h2>' }, { $elem: $('<h3>H3</h3>'), value: '<h3>' }, { $elem: $('<h4>H4</h4>'), value: '<h4>' }, { $elem: $('<h5>H5</h5>'), value: '<h5>' }, { $elem: $('<p>正文</p>'), value: '<p>' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 Head 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nHead.prototype = {\n    constructor: Head,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if (editor.$textElem.equal($selectionElem)) {\n            // 不能选中多行来设置标题，否则会出现问题\n            // 例如选中的是 <p>xxx</p><p>yyy</p> 来设置标题，设置之后会成为 <h1>xxx<br>yyy</h1> 不符合预期\n            return;\n        }\n\n        editor.cmd.do('formatBlock', value);\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^h/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - fontSize\n*/\n\n// 构造函数\nfunction FontSize(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-text-heigh\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 160,\n        $title: $('<p>字号</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span style=\"font-size: x-small;\">x-small</span>'), value: '1' }, { $elem: $('<span style=\"font-size: small;\">small</span>'), value: '2' }, { $elem: $('<span>normal</span>'), value: '3' }, { $elem: $('<span style=\"font-size: large;\">large</span>'), value: '4' }, { $elem: $('<span style=\"font-size: x-large;\">x-large</span>'), value: '5' }, { $elem: $('<span style=\"font-size: xx-large;\">xx-large</span>'), value: '6' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontSize 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontSize.prototype = {\n    constructor: FontSize,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontSize', value);\n    }\n};\n\n/*\n    menu - fontName\n*/\n\n// 构造函数\nfunction FontName(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-font\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 获取配置的字体\n    var config = editor.config;\n    var fontNames = config.fontNames || [];\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>字体</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: fontNames.map(function (fontName) {\n            return { $elem: $('<span style=\"font-family: ' + fontName + ';\">' + fontName + '</span>'), value: fontName };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontName 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontName.prototype = {\n    constructor: FontName,\n\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontName', value);\n    }\n};\n\n/*\n    panel\n*/\n\nvar emptyFn = function emptyFn() {};\n\n// 记录已经显示 panel 的菜单\nvar _isCreatedPanelMenus = [];\n\n// 构造函数\nfunction Panel(menu, opt) {\n    this.menu = menu;\n    this.opt = opt;\n}\n\n// 原型\nPanel.prototype = {\n    constructor: Panel,\n\n    // 显示（插入DOM）\n    show: function show() {\n        var _this = this;\n\n        var menu = this.menu;\n        if (_isCreatedPanelMenus.indexOf(menu) >= 0) {\n            // 该菜单已经创建了 panel 不能再创建\n            return;\n        }\n\n        var editor = menu.editor;\n        var $body = $('body');\n        var $textContainerElem = editor.$textContainerElem;\n        var opt = this.opt;\n\n        // panel 的容器\n        var $container = $('<div class=\"w-e-panel-container\"></div>');\n        var width = opt.width || 300; // 默认 300px\n        $container.css('width', width + 'px').css('margin-left', (0 - width) / 2 + 'px');\n\n        // 添加关闭按钮\n        var $closeBtn = $('<i class=\"w-e-icon-close w-e-panel-close\"></i>');\n        $container.append($closeBtn);\n        $closeBtn.on('click', function () {\n            _this.hide();\n        });\n\n        // 准备 tabs 容器\n        var $tabTitleContainer = $('<ul class=\"w-e-panel-tab-title\"></ul>');\n        var $tabContentContainer = $('<div class=\"w-e-panel-tab-content\"></div>');\n        $container.append($tabTitleContainer).append($tabContentContainer);\n\n        // 设置高度\n        var height = opt.height;\n        if (height) {\n            $tabContentContainer.css('height', height + 'px').css('overflow-y', 'auto');\n        }\n\n        // tabs\n        var tabs = opt.tabs || [];\n        var tabTitleArr = [];\n        var tabContentArr = [];\n        tabs.forEach(function (tab, tabIndex) {\n            if (!tab) {\n                return;\n            }\n            var title = tab.title || '';\n            var tpl = tab.tpl || '';\n\n            // 替换多语言\n            title = replaceLang(editor, title);\n            tpl = replaceLang(editor, tpl);\n\n            // 添加到 DOM\n            var $title = $('<li class=\"w-e-item\">' + title + '</li>');\n            $tabTitleContainer.append($title);\n            var $content = $(tpl);\n            $tabContentContainer.append($content);\n\n            // 记录到内存\n            $title._index = tabIndex;\n            tabTitleArr.push($title);\n            tabContentArr.push($content);\n\n            // 设置 active 项\n            if (tabIndex === 0) {\n                $title._active = true;\n                $title.addClass('w-e-active');\n            } else {\n                $content.hide();\n            }\n\n            // 绑定 tab 的事件\n            $title.on('click', function (e) {\n                if ($title._active) {\n                    return;\n                }\n                // 隐藏所有的 tab\n                tabTitleArr.forEach(function ($title) {\n                    $title._active = false;\n                    $title.removeClass('w-e-active');\n                });\n                tabContentArr.forEach(function ($content) {\n                    $content.hide();\n                });\n\n                // 显示当前的 tab\n                $title._active = true;\n                $title.addClass('w-e-active');\n                $content.show();\n            });\n        });\n\n        // 绑定关闭事件\n        $container.on('click', function (e) {\n            // 点击时阻止冒泡\n            e.stopPropagation();\n        });\n        $body.on('click', function (e) {\n            _this.hide();\n        });\n\n        // 添加到 DOM\n        $textContainerElem.append($container);\n\n        // 绑定 opt 的事件，只有添加到 DOM 之后才能绑定成功\n        tabs.forEach(function (tab, index) {\n            if (!tab) {\n                return;\n            }\n            var events = tab.events || [];\n            events.forEach(function (event) {\n                var selector = event.selector;\n                var type = event.type;\n                var fn = event.fn || emptyFn;\n                var $content = tabContentArr[index];\n                $content.find(selector).on(type, function (e) {\n                    e.stopPropagation();\n                    var needToHide = fn(e);\n                    // 执行完事件之后，是否要关闭 panel\n                    if (needToHide) {\n                        _this.hide();\n                    }\n                });\n            });\n        });\n\n        // focus 第一个 elem\n        var $inputs = $container.find('input[type=text],textarea');\n        if ($inputs.length) {\n            $inputs.get(0).focus();\n        }\n\n        // 添加到属性\n        this.$container = $container;\n\n        // 隐藏其他 panel\n        this._hideOtherPanels();\n        // 记录该 menu 已经创建了 panel\n        _isCreatedPanelMenus.push(menu);\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        var menu = this.menu;\n        var $container = this.$container;\n        if ($container) {\n            $container.remove();\n        }\n\n        // 将该 menu 记录中移除\n        _isCreatedPanelMenus = _isCreatedPanelMenus.filter(function (item) {\n            if (item === menu) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n    },\n\n    // 一个 panel 展示时，隐藏其他 panel\n    _hideOtherPanels: function _hideOtherPanels() {\n        if (!_isCreatedPanelMenus.length) {\n            return;\n        }\n        _isCreatedPanelMenus.forEach(function (menu) {\n            var panel = menu.panel || {};\n            if (panel.hide) {\n                panel.hide();\n            }\n        });\n    }\n};\n\n/*\n    menu - link\n*/\n// 构造函数\nfunction Link(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-link\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nLink.prototype = {\n    constructor: Link,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $linkelem = void 0;\n\n        if (this._active) {\n            // 当前选区在链接里面\n            $linkelem = editor.selection.getSelectionContainerElem();\n            if (!$linkelem) {\n                return;\n            }\n            // 将该元素都包含在选取之内，以便后面整体替换\n            editor.selection.createRangeByElem($linkelem);\n            editor.selection.restoreSelection();\n            // 显示 panel\n            this._createPanel($linkelem.text(), $linkelem.attr('href'));\n        } else {\n            // 当前选区不在链接里面\n            if (editor.selection.isSelectionEmpty()) {\n                // 选区是空的，未选中内容\n                this._createPanel('', '');\n            } else {\n                // 选中内容了\n                this._createPanel(editor.selection.getSelectionText(), '');\n            }\n        }\n    },\n\n    // 创建 panel\n    _createPanel: function _createPanel(text, link) {\n        var _this = this;\n\n        // panel 中需要用到的id\n        var inputLinkId = getRandom('input-link');\n        var inputTextId = getRandom('input-text');\n        var btnOkId = getRandom('btn-ok');\n        var btnDelId = getRandom('btn-del');\n\n        // 是否显示“删除链接”\n        var delBtnDisplay = this._active ? 'inline-block' : 'none';\n\n        // 初始化并显示 panel\n        var panel = new Panel(this, {\n            width: 300,\n            // panel 中可包含多个 tab\n            tabs: [{\n                // tab 的标题\n                title: '链接',\n                // 模板\n                tpl: '<div>\\n                            <input id=\"' + inputTextId + '\" type=\"text\" class=\"block\" value=\"' + text + '\" placeholder=\"\\u94FE\\u63A5\\u6587\\u5B57\"/></td>\\n                            <input id=\"' + inputLinkId + '\" type=\"text\" class=\"block\" value=\"' + link + '\" placeholder=\"http://...\"/></td>\\n                            <div class=\"w-e-button-container\">\\n                                <button id=\"' + btnOkId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                                <button id=\"' + btnDelId + '\" class=\"gray right\" style=\"display:' + delBtnDisplay + '\">\\u5220\\u9664\\u94FE\\u63A5</button>\\n                            </div>\\n                        </div>',\n                // 事件绑定\n                events: [\n                // 插入链接\n                {\n                    selector: '#' + btnOkId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行插入链接\n                        var $link = $('#' + inputLinkId);\n                        var $text = $('#' + inputTextId);\n                        var link = $link.val();\n                        var text = $text.val();\n                        _this._insertLink(text, link);\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                },\n                // 删除链接\n                {\n                    selector: '#' + btnDelId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行删除链接\n                        _this._delLink();\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // tab end\n            ] // tabs end\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 删除当前链接\n    _delLink: function _delLink() {\n        if (!this._active) {\n            return;\n        }\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var selectionText = editor.selection.getSelectionText();\n        editor.cmd.do('insertHTML', '<span>' + selectionText + '</span>');\n    },\n\n    // 插入链接\n    _insertLink: function _insertLink(text, link) {\n        var editor = this.editor;\n        var config = editor.config;\n        var linkCheck = config.linkCheck;\n        var checkResult = true; // 默认为 true\n        if (linkCheck && typeof linkCheck === 'function') {\n            checkResult = linkCheck(text, link);\n        }\n        if (checkResult === true) {\n            editor.cmd.do('insertHTML', '<a href=\"' + link + '\" target=\"_blank\">' + text + '</a>');\n        } else {\n            alert(checkResult);\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        if ($selectionELem.getNodeName() === 'A') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    italic-menu\n*/\n// 构造函数\nfunction Italic(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-italic\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nItalic.prototype = {\n    constructor: Italic,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 italic 命令\n        editor.cmd.do('italic');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('italic')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    redo-menu\n*/\n// 构造函数\nfunction Redo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-redo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nRedo.prototype = {\n    constructor: Redo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 redo 命令\n        editor.cmd.do('redo');\n    }\n};\n\n/*\n    strikeThrough-menu\n*/\n// 构造函数\nfunction StrikeThrough(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-strikethrough\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nStrikeThrough.prototype = {\n    constructor: StrikeThrough,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 strikeThrough 命令\n        editor.cmd.do('strikeThrough');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('strikeThrough')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    underline-menu\n*/\n// 构造函数\nfunction Underline(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-underline\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUnderline.prototype = {\n    constructor: Underline,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 underline 命令\n        editor.cmd.do('underline');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('underline')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    undo-menu\n*/\n// 构造函数\nfunction Undo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-undo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUndo.prototype = {\n    constructor: Undo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 undo 命令\n        editor.cmd.do('undo');\n    }\n};\n\n/*\n    menu - list\n*/\n// 构造函数\nfunction List(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-list2\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>设置列表</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-list-numbered\"></i> 有序列表</span>'), value: 'insertOrderedList' }, { $elem: $('<span><i class=\"w-e-icon-list2\"></i> 无序列表</span>'), value: 'insertUnorderedList' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nList.prototype = {\n    constructor: List,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        editor.selection.restoreSelection();\n        if (editor.cmd.queryCommandState(value)) {\n            return;\n        }\n        editor.cmd.do(value);\n\n        // 验证列表是否被包裹在 <p> 之内\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if ($selectionElem.getNodeName() === 'LI') {\n            $selectionElem = $selectionElem.parent();\n        }\n        if (/^ol|ul$/i.test($selectionElem.getNodeName()) === false) {\n            return;\n        }\n        if ($selectionElem.equal($textElem)) {\n            // 证明是顶级标签，没有被 <p> 包裹\n            return;\n        }\n        var $parent = $selectionElem.parent();\n        if ($parent.equal($textElem)) {\n            // $parent 是顶级标签，不能删除\n            return;\n        }\n\n        $selectionElem.insertAfter($parent);\n        $parent.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('insertUnOrderedList') || editor.cmd.queryCommandState('insertOrderedList')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - justify\n*/\n// 构造函数\nfunction Justify(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paragraph-left\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>对齐方式</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-paragraph-left\"></i> 靠左</span>'), value: 'justifyLeft' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-center\"></i> 居中</span>'), value: 'justifyCenter' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-right\"></i> 靠右</span>'), value: 'justifyRight' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nJustify.prototype = {\n    constructor: Justify,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do(value);\n    }\n};\n\n/*\n    menu - Forecolor\n*/\n// 构造函数\nfunction ForeColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-pencil2\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>文字颜色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-pencil2\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 ForeColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nForeColor.prototype = {\n    constructor: ForeColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('foreColor', value);\n    }\n};\n\n/*\n    menu - BackColor\n*/\n// 构造函数\nfunction BackColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paint-brush\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>背景色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-paint-brush\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 BackColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nBackColor.prototype = {\n    constructor: BackColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('backColor', value);\n    }\n};\n\n/*\n    menu - quote\n*/\n// 构造函数\nfunction Quote(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-quotes-left\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nQuote.prototype = {\n    constructor: Quote,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        var nodeName = $selectionElem.getNodeName();\n\n        if (!UA.isIE()) {\n            if (nodeName === 'BLOCKQUOTE') {\n                // 撤销 quote\n                editor.cmd.do('formatBlock', '<P>');\n            } else {\n                // 转换为 quote\n                editor.cmd.do('formatBlock', '<BLOCKQUOTE>');\n            }\n            return;\n        }\n\n        // IE 中不支持 formatBlock <BLOCKQUOTE> ，要用其他方式兼容\n        var content = void 0,\n            $targetELem = void 0;\n        if (nodeName === 'P') {\n            // 将 P 转换为 quote\n            content = $selectionElem.text();\n            $targetELem = $('<blockquote>' + content + '</blockquote>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n            return;\n        }\n        if (nodeName === 'BLOCKQUOTE') {\n            // 撤销 quote\n            content = $selectionElem.text();\n            $targetELem = $('<p>' + content + '</p>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n        }\n    },\n\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^BLOCKQUOTE$/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - code\n*/\n// 构造函数\nfunction Code(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-terminal\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nCode.prototype = {\n    constructor: Code,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $startElem = editor.selection.getSelectionStartElem();\n        var $endElem = editor.selection.getSelectionEndElem();\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n        var selectionText = editor.selection.getSelectionText();\n        var $code = void 0;\n\n        if (!$startElem.equal($endElem)) {\n            // 跨元素选择，不做处理\n            editor.selection.restoreSelection();\n            return;\n        }\n        if (!isSeleEmpty) {\n            // 选取不是空，用 <code> 包裹即可\n            $code = $('<code>' + selectionText + '</code>');\n            editor.cmd.do('insertElem', $code);\n            editor.selection.createRangeByElem($code, false);\n            editor.selection.restoreSelection();\n            return;\n        }\n\n        // 选取是空，且没有夸元素选择，则插入 <pre><code></code></prev>\n        if (this._active) {\n            // 选中状态，将编辑内容\n            this._createPanel($startElem.html());\n        } else {\n            // 未选中状态，将创建内容\n            this._createPanel();\n        }\n    },\n\n    _createPanel: function _createPanel(value) {\n        var _this = this;\n\n        // value - 要编辑的内容\n        value = value || '';\n        var type = !value ? 'new' : 'edit';\n        var textId = getRandom('texxt');\n        var btnId = getRandom('btn');\n\n        var panel = new Panel(this, {\n            width: 500,\n            // 一个 Panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入代码',\n                // 模板\n                tpl: '<div>\\n                        <textarea id=\"' + textId + '\" style=\"height:145px;;\">' + value + '</textarea>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    <div>',\n                // 事件绑定\n                events: [\n                // 插入代码\n                {\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textId);\n                        var text = $text.val() || $text.html();\n                        text = replaceHtmlSymbol(text);\n                        if (type === 'new') {\n                            // 新插入\n                            _this._insertCode(text);\n                        } else {\n                            // 编辑更新\n                            _this._updateCode(text);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // new Panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入代码\n    _insertCode: function _insertCode(value) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', '<pre><code>' + value + '</code></pre><p><br></p>');\n    },\n\n    // 更新代码\n    _updateCode: function _updateCode(value) {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        $selectionELem.html(value);\n        editor.selection.restoreSelection();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $parentElem = $selectionELem.parent();\n        if ($selectionELem.getNodeName() === 'CODE' && $parentElem.getNodeName() === 'PRE') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - emoticon\n*/\n// 构造函数\nfunction Emoticon(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-happy\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nEmoticon.prototype = {\n    constructor: Emoticon,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config;\n        // 获取表情配置\n        var emotions = config.emotions || [];\n\n        // 创建表情 dropPanel 的配置\n        var tabConfig = [];\n        emotions.forEach(function (emotData) {\n            var emotType = emotData.type;\n            var content = emotData.content || [];\n\n            // 这一组表情最终拼接出来的 html\n            var faceHtml = '';\n\n            // emoji 表情\n            if (emotType === 'emoji') {\n                content.forEach(function (item) {\n                    if (item) {\n                        faceHtml += '<span class=\"w-e-item\">' + item + '</span>';\n                    }\n                });\n            }\n            // 图片表情\n            if (emotType === 'image') {\n                content.forEach(function (item) {\n                    var src = item.src;\n                    var alt = item.alt;\n                    if (src) {\n                        // 加一个 data-w-e 属性，点击图片的时候不再提示编辑图片\n                        faceHtml += '<span class=\"w-e-item\"><img src=\"' + src + '\" alt=\"' + alt + '\" data-w-e=\"1\"/></span>';\n                    }\n                });\n            }\n\n            tabConfig.push({\n                title: emotData.title,\n                tpl: '<div class=\"w-e-emoticon-container\">' + faceHtml + '</div>',\n                events: [{\n                    selector: 'span.w-e-item',\n                    type: 'click',\n                    fn: function fn(e) {\n                        var target = e.target;\n                        var $target = $(target);\n                        var nodeName = $target.getNodeName();\n\n                        var insertHtml = void 0;\n                        if (nodeName === 'IMG') {\n                            // 插入图片\n                            insertHtml = $target.parent().html();\n                        } else {\n                            // 插入 emoji\n                            insertHtml = '<span>' + $target.html() + '</span>';\n                        }\n\n                        _this._insert(insertHtml);\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            });\n        });\n\n        var panel = new Panel(this, {\n            width: 300,\n            height: 200,\n            // 一个 Panel 包含多个 tab\n            tabs: tabConfig\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表情\n    _insert: function _insert(emotHtml) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', emotHtml);\n    }\n};\n\n/*\n    menu - table\n*/\n// 构造函数\nfunction Table(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-table2\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nTable.prototype = {\n    constructor: Table,\n\n    onClick: function onClick() {\n        if (this._active) {\n            // 编辑现有表格\n            this._createEditPanel();\n        } else {\n            // 插入新表格\n            this._createInsertPanel();\n        }\n    },\n\n    // 创建插入新表格的 panel\n    _createInsertPanel: function _createInsertPanel() {\n        var _this = this;\n\n        // 用到的 id\n        var btnInsertId = getRandom('btn');\n        var textRowNum = getRandom('row');\n        var textColNum = getRandom('col');\n\n        var panel = new Panel(this, {\n            width: 250,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入表格',\n                // 模板\n                tpl: '<div>\\n                        <p style=\"text-align:left; padding:5px 0;\">\\n                            \\u521B\\u5EFA\\n                            <input id=\"' + textRowNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u884C\\n                            <input id=\"' + textColNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u5217\\u7684\\u8868\\u683C\\n                        </p>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnInsertId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 点击按钮，插入表格\n                    selector: '#' + btnInsertId,\n                    type: 'click',\n                    fn: function fn() {\n                        var rowNum = parseInt($('#' + textRowNum).val());\n                        var colNum = parseInt($('#' + textColNum).val());\n\n                        if (rowNum && colNum && rowNum > 0 && colNum > 0) {\n                            // form 数据有效\n                            _this._insert(rowNum, colNum);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 展示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表格\n    _insert: function _insert(rowNum, colNum) {\n        // 拼接 table 模板\n        var r = void 0,\n            c = void 0;\n        var html = '<table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">';\n        for (r = 0; r < rowNum; r++) {\n            html += '<tr>';\n            if (r === 0) {\n                for (c = 0; c < colNum; c++) {\n                    html += '<th>&nbsp;</th>';\n                }\n            } else {\n                for (c = 0; c < colNum; c++) {\n                    html += '<td>&nbsp;</td>';\n                }\n            }\n            html += '</tr>';\n        }\n        html += '</table><p><br></p>';\n\n        // 执行命令\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', html);\n\n        // 防止 firefox 下出现 resize 的控制点\n        editor.cmd.do('enableObjectResizing', false);\n        editor.cmd.do('enableInlineTableEditing', false);\n    },\n\n    // 创建编辑表格的 panel\n    _createEditPanel: function _createEditPanel() {\n        var _this2 = this;\n\n        // 可用的 id\n        var addRowBtnId = getRandom('add-row');\n        var addColBtnId = getRandom('add-col');\n        var delRowBtnId = getRandom('del-row');\n        var delColBtnId = getRandom('del-col');\n        var delTableBtnId = getRandom('del-table');\n\n        // 创建 panel 对象\n        var panel = new Panel(this, {\n            width: 320,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '编辑表格',\n                // 模板\n                tpl: '<div>\\n                        <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                            <button id=\"' + addRowBtnId + '\" class=\"left\">\\u589E\\u52A0\\u884C</button>\\n                            <button id=\"' + delRowBtnId + '\" class=\"red left\">\\u5220\\u9664\\u884C</button>\\n                            <button id=\"' + addColBtnId + '\" class=\"left\">\\u589E\\u52A0\\u5217</button>\\n                            <button id=\"' + delColBtnId + '\" class=\"red left\">\\u5220\\u9664\\u5217</button>\\n                        </div>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + delTableBtnId + '\" class=\"gray left\">\\u5220\\u9664\\u8868\\u683C</button>\\n                        </dv>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 增加行\n                    selector: '#' + addRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 增加列\n                    selector: '#' + addColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除行\n                    selector: '#' + delRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除列\n                    selector: '#' + delColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除表格\n                    selector: '#' + delTableBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delTable();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            }]\n        });\n        // 显示 panel\n        panel.show();\n    },\n\n    // 获取选中的单元格的位置信息\n    _getLocationData: function _getLocationData() {\n        var result = {};\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName !== 'TD' && nodeName !== 'TH') {\n            return;\n        }\n\n        // 获取 td index\n        var $tr = $selectionELem.parent();\n        var $tds = $tr.children();\n        var tdLength = $tds.length;\n        $tds.forEach(function (td, index) {\n            if (td === $selectionELem[0]) {\n                // 记录并跳出循环\n                result.td = {\n                    index: index,\n                    elem: td,\n                    length: tdLength\n                };\n                return false;\n            }\n        });\n\n        // 获取 tr index\n        var $tbody = $tr.parent();\n        var $trs = $tbody.children();\n        var trLength = $trs.length;\n        $trs.forEach(function (tr, index) {\n            if (tr === $tr[0]) {\n                // 记录并跳出循环\n                result.tr = {\n                    index: index,\n                    elem: tr,\n                    length: trLength\n                };\n                return false;\n            }\n        });\n\n        // 返回结果\n        return result;\n    },\n\n    // 增加行\n    _addRow: function _addRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        var tdData = locationData.td;\n        var tdLength = tdData.length;\n\n        // 拼接即将插入的字符串\n        var newTr = document.createElement('tr');\n        var tpl = '',\n            i = void 0;\n        for (i = 0; i < tdLength; i++) {\n            tpl += '<td>&nbsp;</td>';\n        }\n        newTr.innerHTML = tpl;\n        // 插入\n        $(newTr).insertAfter($currentTr);\n    },\n\n    // 增加列\n    _addCol: function _addCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            var name = $currentTd.getNodeName().toLowerCase();\n\n            // new 一个 td，并插入\n            var newTd = document.createElement(name);\n            $(newTd).insertAfter($currentTd);\n        });\n    },\n\n    // 删除行\n    _delRow: function _delRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        $currentTr.remove();\n    },\n\n    // 删除列\n    _delCol: function _delCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            // 删除\n            $currentTd.remove();\n        });\n    },\n\n    // 删除表格\n    _delTable: function _delTable() {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $table = $selectionELem.parentUntil('table');\n        if (!$table) {\n            return;\n        }\n        $table.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName === 'TD' || nodeName === 'TH') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - video\n*/\n// 构造函数\nfunction Video(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-play\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nVideo.prototype = {\n    constructor: Video,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        // 创建 id\n        var textValId = getRandom('text-val');\n        var btnId = getRandom('btn');\n\n        // 创建 panel\n        var panel = new Panel(this, {\n            width: 350,\n            // 一个 panel 多个 tab\n            tabs: [{\n                // 标题\n                title: '插入视频',\n                // 模板\n                tpl: '<div>\\n                        <input id=\"' + textValId + '\" type=\"text\" class=\"block\" placeholder=\"\\u683C\\u5F0F\\u5982\\uFF1A<iframe src=... ></iframe>\"/>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textValId);\n                        var val = $text.val().trim();\n\n                        // 测试用视频地址\n                        // <iframe height=498 width=510 src='http://player.youku.com/embed/XMjcwMzc3MzM3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\n                        if (val) {\n                            // 插入视频\n                            _this._insert(val);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入视频\n    _insert: function _insert(val) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', val + '<p><br></p>');\n    }\n};\n\n/*\n    menu - img\n*/\n// 构造函数\nfunction Image(editor) {\n    this.editor = editor;\n    var imgMenuId = getRandom('w-e-img');\n    this.$elem = $('<div class=\"w-e-menu\" id=\"' + imgMenuId + '\"><i class=\"w-e-icon-image\"></i></div>');\n    editor.imgMenuId = imgMenuId;\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nImage.prototype = {\n    constructor: Image,\n\n    onClick: function onClick() {\n        var editor = this.editor;\n        var config = editor.config;\n        if (config.qiniu) {\n            return;\n        }\n        if (this._active) {\n            this._createEditPanel();\n        } else {\n            this._createInsertPanel();\n        }\n    },\n\n    _createEditPanel: function _createEditPanel() {\n        var editor = this.editor;\n\n        // id\n        var width30 = getRandom('width-30');\n        var width50 = getRandom('width-50');\n        var width100 = getRandom('width-100');\n        var delBtn = getRandom('del-btn');\n\n        // tab 配置\n        var tabsConfig = [{\n            title: '编辑图片',\n            tpl: '<div>\\n                    <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                        <span style=\"float:left;font-size:14px;margin:4px 5px 0 5px;color:#333;\">\\u6700\\u5927\\u5BBD\\u5EA6\\uFF1A</span>\\n                        <button id=\"' + width30 + '\" class=\"left\">30%</button>\\n                        <button id=\"' + width50 + '\" class=\"left\">50%</button>\\n                        <button id=\"' + width100 + '\" class=\"left\">100%</button>\\n                    </div>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + delBtn + '\" class=\"gray left\">\\u5220\\u9664\\u56FE\\u7247</button>\\n                    </dv>\\n                </div>',\n            events: [{\n                selector: '#' + width30,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '30%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width50,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '50%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width100,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '100%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + delBtn,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.remove();\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }]\n        }];\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfig\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    _createInsertPanel: function _createInsertPanel() {\n        var editor = this.editor;\n        var uploadImg = editor.uploadImg;\n        var config = editor.config;\n\n        // id\n        var upTriggerId = getRandom('up-trigger');\n        var upFileId = getRandom('up-file');\n        var linkUrlId = getRandom('link-url');\n        var linkBtnId = getRandom('link-btn');\n\n        // tabs 的配置\n        var tabsConfig = [{\n            title: '上传图片',\n            tpl: '<div class=\"w-e-up-img-container\">\\n                    <div id=\"' + upTriggerId + '\" class=\"w-e-up-btn\">\\n                        <i class=\"w-e-icon-upload2\"></i>\\n                    </div>\\n                    <div style=\"display:none;\">\\n                        <input id=\"' + upFileId + '\" type=\"file\" multiple=\"multiple\" accept=\"image/jpg,image/jpeg,image/png,image/gif,image/bmp\"/>\\n                    </div>\\n                </div>',\n            events: [{\n                // 触发选择图片\n                selector: '#' + upTriggerId,\n                type: 'click',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (fileElem) {\n                        fileElem.click();\n                    } else {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n                }\n            }, {\n                // 选择图片完毕\n                selector: '#' + upFileId,\n                type: 'change',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (!fileElem) {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n\n                    // 获取选中的 file 对象列表\n                    var fileList = fileElem.files;\n                    if (fileList.length) {\n                        uploadImg.uploadImg(fileList);\n                    }\n\n                    // 返回 true 可关闭 panel\n                    return true;\n                }\n            }]\n        }, // first tab end\n        {\n            title: '网络图片',\n            tpl: '<div>\\n                    <input id=\"' + linkUrlId + '\" type=\"text\" class=\"block\" placeholder=\"\\u56FE\\u7247\\u94FE\\u63A5\"/></td>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + linkBtnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                    </div>\\n                </div>',\n            events: [{\n                selector: '#' + linkBtnId,\n                type: 'click',\n                fn: function fn() {\n                    var $linkUrl = $('#' + linkUrlId);\n                    var url = $linkUrl.val().trim();\n\n                    if (url) {\n                        uploadImg.insertLinkImg(url);\n                    }\n\n                    // 返回 true 表示函数执行结束之后关闭 panel\n                    return true;\n                }\n            }]\n        } // second tab end\n        ]; // tabs end\n\n        // 判断 tabs 的显示\n        var tabsConfigResult = [];\n        if ((config.uploadImgShowBase64 || config.uploadImgServer || config.customUploadImg) && window.FileReader) {\n            // 显示“上传图片”\n            tabsConfigResult.push(tabsConfig[0]);\n        }\n        if (config.showLinkImg) {\n            // 显示“网络图片”\n            tabsConfigResult.push(tabsConfig[1]);\n        }\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfigResult\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor._selectedImg) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    所有菜单的汇总\n*/\n\n// 存储菜单的构造函数\nvar MenuConstructors = {};\n\nMenuConstructors.bold = Bold;\n\nMenuConstructors.head = Head;\n\nMenuConstructors.fontSize = FontSize;\n\nMenuConstructors.fontName = FontName;\n\nMenuConstructors.link = Link;\n\nMenuConstructors.italic = Italic;\n\nMenuConstructors.redo = Redo;\n\nMenuConstructors.strikeThrough = StrikeThrough;\n\nMenuConstructors.underline = Underline;\n\nMenuConstructors.undo = Undo;\n\nMenuConstructors.list = List;\n\nMenuConstructors.justify = Justify;\n\nMenuConstructors.foreColor = ForeColor;\n\nMenuConstructors.backColor = BackColor;\n\nMenuConstructors.quote = Quote;\n\nMenuConstructors.code = Code;\n\nMenuConstructors.emoticon = Emoticon;\n\nMenuConstructors.table = Table;\n\nMenuConstructors.video = Video;\n\nMenuConstructors.image = Image;\n\n/*\n    菜单集合\n*/\n// 构造函数\nfunction Menus(editor) {\n    this.editor = editor;\n    this.menus = {};\n}\n\n// 修改原型\nMenus.prototype = {\n    constructor: Menus,\n\n    // 初始化菜单\n    init: function init() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config || {};\n        var configMenus = config.menus || []; // 获取配置中的菜单\n\n        // 根据配置信息，创建菜单\n        configMenus.forEach(function (menuKey) {\n            var MenuConstructor = MenuConstructors[menuKey];\n            if (MenuConstructor && typeof MenuConstructor === 'function') {\n                // 创建单个菜单\n                _this.menus[menuKey] = new MenuConstructor(editor);\n            }\n        });\n\n        // 添加到菜单栏\n        this._addToToolbar();\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 添加到菜单栏\n    _addToToolbar: function _addToToolbar() {\n        var editor = this.editor;\n        var $toolbarElem = editor.$toolbarElem;\n        var menus = this.menus;\n        var config = editor.config;\n        // config.zIndex 是配置的编辑区域的 z-index，菜单的 z-index 得在其基础上 +1\n        var zIndex = config.zIndex + 1;\n        objForEach(menus, function (key, menu) {\n            var $elem = menu.$elem;\n            if ($elem) {\n                // 设置 z-index\n                $elem.css('z-index', zIndex);\n                $toolbarElem.append($elem);\n            }\n        });\n    },\n\n    // 绑定菜单 click mouseenter 事件\n    _bindEvent: function _bindEvent() {\n        var menus = this.menus;\n        var editor = this.editor;\n        objForEach(menus, function (key, menu) {\n            var type = menu.type;\n            if (!type) {\n                return;\n            }\n            var $elem = menu.$elem;\n            var droplist = menu.droplist;\n            var panel = menu.panel;\n\n            // 点击类型，例如 bold\n            if (type === 'click' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    menu.onClick(e);\n                });\n            }\n\n            // 下拉框，例如 head\n            if (type === 'droplist' && droplist) {\n                $elem.on('mouseenter', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 显示\n                    droplist.showTimeoutId = setTimeout(function () {\n                        droplist.show();\n                    }, 200);\n                }).on('mouseleave', function (e) {\n                    // 隐藏\n                    droplist.hideTimeoutId = setTimeout(function () {\n                        droplist.hide();\n                    }, 0);\n                });\n            }\n\n            // 弹框类型，例如 link\n            if (type === 'panel' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    e.stopPropagation();\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 在自定义事件中显示 panel\n                    menu.onClick(e);\n                });\n            }\n        });\n    },\n\n    // 尝试修改菜单状态\n    changeActive: function changeActive() {\n        var menus = this.menus;\n        objForEach(menus, function (key, menu) {\n            if (menu.tryChangeActive) {\n                setTimeout(function () {\n                    menu.tryChangeActive();\n                }, 100);\n            }\n        });\n    }\n};\n\n/*\n    粘贴信息的处理\n*/\n\n// 获取粘贴的纯文本\nfunction getPasteText(e) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n    }\n\n    return replaceHtmlSymbol(pasteText);\n}\n\n// 获取粘贴的html\nfunction getPasteHtml(e, filterStyle, ignoreImg) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0,\n        pasteHtml = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n        pasteHtml = clipboardData.getData('text/html');\n    }\n    if (!pasteHtml && pasteText) {\n        pasteHtml = '<p>' + replaceHtmlSymbol(pasteText) + '</p>';\n    }\n    if (!pasteHtml) {\n        return;\n    }\n\n    // 过滤word中状态过来的无用字符\n    var docSplitHtml = pasteHtml.split('</html>');\n    if (docSplitHtml.length === 2) {\n        pasteHtml = docSplitHtml[0];\n    }\n\n    // 过滤无用标签\n    pasteHtml = pasteHtml.replace(/<(meta|script|link).+?>/igm, '');\n    // 去掉注释\n    pasteHtml = pasteHtml.replace(/<!--.*?-->/mg, '');\n    // 过滤 data-xxx 属性\n    pasteHtml = pasteHtml.replace(/\\s?data-.+?=('|\").+?('|\")/igm, '');\n\n    if (ignoreImg) {\n        // 忽略图片\n        pasteHtml = pasteHtml.replace(/<img.+?>/igm, '');\n    }\n\n    if (filterStyle) {\n        // 过滤样式\n        pasteHtml = pasteHtml.replace(/\\s?(class|style)=('|\").*?('|\")/igm, '');\n    } else {\n        // 保留样式\n        pasteHtml = pasteHtml.replace(/\\s?class=('|\").*?('|\")/igm, '');\n    }\n\n    return pasteHtml;\n}\n\n// 获取粘贴的图片文件\nfunction getPasteImgs(e) {\n    var result = [];\n    var txt = getPasteText(e);\n    if (txt) {\n        // 有文字，就忽略图片\n        return result;\n    }\n\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData || {};\n    var items = clipboardData.items;\n    if (!items) {\n        return result;\n    }\n\n    objForEach(items, function (key, value) {\n        var type = value.type;\n        if (/image/i.test(type)) {\n            result.push(value.getAsFile());\n        }\n    });\n\n    return result;\n}\n\n/*\n    编辑区域\n*/\n\n// 获取一个 elem.childNodes 的 JSON 数据\nfunction getChildrenJSON($elem) {\n    var result = [];\n    var $children = $elem.childNodes() || []; // 注意 childNodes() 可以获取文本节点\n    $children.forEach(function (curElem) {\n        var elemResult = void 0;\n        var nodeType = curElem.nodeType;\n\n        // 文本节点\n        if (nodeType === 3) {\n            elemResult = curElem.textContent;\n            elemResult = replaceHtmlSymbol(elemResult);\n        }\n\n        // 普通 DOM 节点\n        if (nodeType === 1) {\n            elemResult = {};\n\n            // tag\n            elemResult.tag = curElem.nodeName.toLowerCase();\n            // attr\n            var attrData = [];\n            var attrList = curElem.attributes || {};\n            var attrListLength = attrList.length || 0;\n            for (var i = 0; i < attrListLength; i++) {\n                var attr = attrList[i];\n                attrData.push({\n                    name: attr.name,\n                    value: attr.value\n                });\n            }\n            elemResult.attrs = attrData;\n            // children（递归）\n            elemResult.children = getChildrenJSON($(curElem));\n        }\n\n        result.push(elemResult);\n    });\n    return result;\n}\n\n// 构造函数\nfunction Text(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nText.prototype = {\n    constructor: Text,\n\n    // 初始化\n    init: function init() {\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 清空内容\n    clear: function clear() {\n        this.html('<p><br></p>');\n    },\n\n    // 获取 设置 html\n    html: function html(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var html = void 0;\n        if (val == null) {\n            html = $textElem.html();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            html = html.replace(/\\u200b/gm, '');\n            return html;\n        } else {\n            $textElem.html(val);\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 获取 JSON\n    getJSON: function getJSON() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        return getChildrenJSON($textElem);\n    },\n\n    // 获取 设置 text\n    text: function text(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var text = void 0;\n        if (val == null) {\n            text = $textElem.text();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            text = text.replace(/\\u200b/gm, '');\n            return text;\n        } else {\n            $textElem.text('<p>' + val + '</p>');\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 追加内容\n    append: function append(html) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        $textElem.append($(html));\n\n        // 初始化选取，将光标定位到内容尾部\n        editor.initSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // 实时保存选取\n        this._saveRangeRealTime();\n\n        // 按回车建时的特殊处理\n        this._enterKeyHandle();\n\n        // 清空时保留 <p><br></p>\n        this._clearHandle();\n\n        // 粘贴事件（粘贴文字，粘贴图片）\n        this._pasteHandle();\n\n        // tab 特殊处理\n        this._tabHandle();\n\n        // img 点击\n        this._imgHandle();\n\n        // 拖拽事件\n        this._dragHandle();\n    },\n\n    // 实时保存选取\n    _saveRangeRealTime: function _saveRangeRealTime() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 保存当前的选区\n        function saveRange(e) {\n            // 随时保存选区\n            editor.selection.saveRange();\n            // 更新按钮 ative 状态\n            editor.menus.changeActive();\n        }\n        // 按键后保存\n        $textElem.on('keyup', saveRange);\n        $textElem.on('mousedown', function (e) {\n            // mousedown 状态下，鼠标滑动到编辑区域外面，也需要保存选区\n            $textElem.on('mouseleave', saveRange);\n        });\n        $textElem.on('mouseup', function (e) {\n            saveRange();\n            // 在编辑器区域之内完成点击，取消鼠标滑动到编辑区外面的事件\n            $textElem.off('mouseleave', saveRange);\n        });\n    },\n\n    // 按回车键时的特殊处理\n    _enterKeyHandle: function _enterKeyHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        function insertEmptyP($selectionElem) {\n            var $p = $('<p><br></p>');\n            $p.insertBefore($selectionElem);\n            editor.selection.createRangeByElem($p, true);\n            editor.selection.restoreSelection();\n            $selectionElem.remove();\n        }\n\n        // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n        function pHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            var $parentElem = $selectionElem.parent();\n\n            if ($parentElem.html() === '<code><br></code>') {\n                // 回车之前光标所在一个 <p><code>.....</code></p> ，忽然回车生成一个空的 <p><code><br></code></p>\n                // 而且继续回车跳不出去，因此只能特殊处理\n                insertEmptyP($selectionElem);\n                return;\n            }\n\n            if (!$parentElem.equal($textElem)) {\n                // 不是顶级标签\n                return;\n            }\n\n            var nodeName = $selectionElem.getNodeName();\n            if (nodeName === 'P') {\n                // 当前的标签是 P ，不用做处理\n                return;\n            }\n\n            if ($selectionElem.text()) {\n                // 有内容，不做处理\n                return;\n            }\n\n            // 插入 <p> ，并将选取定位到 <p>，删除当前标签\n            insertEmptyP($selectionElem);\n        }\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                return;\n            }\n            // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n            pHandle(e);\n        });\n\n        // <pre><code></code></pre> 回车时 特殊处理\n        function codeHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName !== 'CODE' || parentNodeName !== 'PRE') {\n                // 不符合要求 忽略\n                return;\n            }\n\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n\n            // 处理：光标定位到代码末尾，联系点击两次回车，即跳出代码块\n            if (editor._willBreakCode === true) {\n                // 此时可以跳出代码块\n                // 插入 <p> ，并将选取定位到 <p>\n                var $p = $('<p><br></p>');\n                $p.insertAfter($parentElem);\n                editor.selection.createRangeByElem($p, true);\n                editor.selection.restoreSelection();\n\n                // 修改状态\n                editor._willBreakCode = false;\n\n                e.preventDefault();\n                return;\n            }\n\n            var _startOffset = editor.selection.getRange().startOffset;\n\n            // 处理：回车时，不能插入 <br> 而是插入 \\n ，因为是在 pre 标签里面\n            editor.cmd.do('insertHTML', '\\n');\n            editor.selection.saveRange();\n            if (editor.selection.getRange().startOffset === _startOffset) {\n                // 没起作用，再来一遍\n                editor.cmd.do('insertHTML', '\\n');\n            }\n\n            var codeLength = $selectionElem.html().length;\n            if (editor.selection.getRange().startOffset + 1 === codeLength) {\n                // 说明光标在代码最后的位置，执行了回车操作\n                // 记录下来，以便下次回车时候跳出 code\n                editor._willBreakCode = true;\n            }\n\n            // 阻止默认行为\n            e.preventDefault();\n        }\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                // 取消即将跳转代码块的记录\n                editor._willBreakCode = false;\n                return;\n            }\n            // <pre><code></code></pre> 回车时 特殊处理\n            codeHandle(e);\n        });\n    },\n\n    // 清空时保留 <p><br></p>\n    _clearHandle: function _clearHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var txtHtml = $textElem.html().toLowerCase().trim();\n            if (txtHtml === '<p><br></p>') {\n                // 最后剩下一个空行，就不再删除了\n                e.preventDefault();\n                return;\n            }\n        });\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var $p = void 0;\n            var txtHtml = $textElem.html().toLowerCase().trim();\n\n            // firefox 时用 txtHtml === '<br>' 判断，其他用 !txtHtml 判断\n            if (!txtHtml || txtHtml === '<br>') {\n                // 内容空了\n                $p = $('<p><br/></p>');\n                $textElem.html(''); // 一定要先清空，否则在 firefox 下有问题\n                $textElem.append($p);\n                editor.selection.createRangeByElem($p, false, true);\n                editor.selection.restoreSelection();\n            }\n        });\n    },\n\n    // 粘贴事件（粘贴文字 粘贴图片）\n    _pasteHandle: function _pasteHandle() {\n        var editor = this.editor;\n        var config = editor.config;\n        var pasteFilterStyle = config.pasteFilterStyle;\n        var pasteTextHandle = config.pasteTextHandle;\n        var ignoreImg = config.pasteIgnoreImg;\n        var $textElem = editor.$textElem;\n\n        // 粘贴图片、文本的事件，每次只能执行一个\n        // 判断该次粘贴事件是否可以执行\n        var pasteTime = 0;\n        function canDo() {\n            var now = Date.now();\n            var flag = false;\n            if (now - pasteTime >= 100) {\n                // 间隔大于 100 ms ，可以执行\n                flag = true;\n            }\n            pasteTime = now;\n            return flag;\n        }\n        function resetTime() {\n            pasteTime = 0;\n        }\n\n        // 粘贴文字\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                // 阻止默认行为，使用 execCommand 的粘贴命令\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的文字\n            var pasteHtml = getPasteHtml(e, pasteFilterStyle, ignoreImg);\n            var pasteText = getPasteText(e);\n            pasteText = pasteText.replace(/\\n/gm, '<br>');\n\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中只能粘贴纯文本\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n                return;\n            }\n\n            // 先放开注释，有问题再追查 ————\n            // // 表格中忽略，可能会出现异常问题\n            // if (nodeName === 'TD' || nodeName === 'TH') {\n            //     return\n            // }\n\n            if (!pasteHtml) {\n                // 没有内容，可继续执行下面的图片粘贴\n                resetTime();\n                return;\n            }\n            try {\n                // firefox 中，获取的 pasteHtml 可能是没有 <ul> 包裹的 <li>\n                // 因此执行 insertHTML 会报错\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteHtml = '' + (pasteTextHandle(pasteHtml) || '');\n                }\n                editor.cmd.do('insertHTML', pasteHtml);\n            } catch (ex) {\n                // 此时使用 pasteText 来兼容一下\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n            }\n        });\n\n        // 粘贴图片\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的图片\n            var pasteFiles = getPasteImgs(e);\n            if (!pasteFiles || !pasteFiles.length) {\n                return;\n            }\n\n            // 获取当前的元素\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中粘贴忽略\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(pasteFiles);\n        });\n    },\n\n    // tab 特殊处理\n    _tabHandle: function _tabHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 9) {\n                return;\n            }\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName === 'CODE' && parentNodeName === 'PRE') {\n                // <pre><code> 里面\n                editor.cmd.do('insertHTML', '    ');\n            } else {\n                // 普通文字\n                editor.cmd.do('insertHTML', '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            e.preventDefault();\n        });\n    },\n\n    // img 点击\n    _imgHandle: function _imgHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 为图片增加 selected 样式\n        $textElem.on('click', 'img', function (e) {\n            var img = this;\n            var $img = $(img);\n\n            if ($img.attr('data-w-e') === '1') {\n                // 是表情图片，忽略\n                return;\n            }\n\n            // 记录当前点击过的图片\n            editor._selectedImg = $img;\n\n            // 修改选区并 restore ，防止用户此时点击退格键，会删除其他内容\n            editor.selection.createRangeByElem($img);\n            editor.selection.restoreSelection();\n        });\n\n        // 去掉图片的 selected 样式\n        $textElem.on('click  keyup', function (e) {\n            if (e.target.matches('img')) {\n                // 点击的是图片，忽略\n                return;\n            }\n            // 删除记录\n            editor._selectedImg = null;\n        });\n    },\n\n    // 拖拽事件\n    _dragHandle: function _dragHandle() {\n        var editor = this.editor;\n\n        // 禁用 document 拖拽事件\n        var $document = $(document);\n        $document.on('dragleave drop dragenter dragover', function (e) {\n            e.preventDefault();\n        });\n\n        // 添加编辑区域拖拽事件\n        var $textElem = editor.$textElem;\n        $textElem.on('drop', function (e) {\n            e.preventDefault();\n            var files = e.dataTransfer && e.dataTransfer.files;\n            if (!files || !files.length) {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(files);\n        });\n    }\n};\n\n/*\n    命令，封装 document.execCommand\n*/\n\n// 构造函数\nfunction Command(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nCommand.prototype = {\n    constructor: Command,\n\n    // 执行命令\n    do: function _do(name, value) {\n        var editor = this.editor;\n\n        // 使用 styleWithCSS\n        if (!editor._useStyleWithCSS) {\n            document.execCommand('styleWithCSS', null, true);\n            editor._useStyleWithCSS = true;\n        }\n\n        // 如果无选区，忽略\n        if (!editor.selection.getRange()) {\n            return;\n        }\n\n        // 恢复选取\n        editor.selection.restoreSelection();\n\n        // 执行\n        var _name = '_' + name;\n        if (this[_name]) {\n            // 有自定义事件\n            this[_name](value);\n        } else {\n            // 默认 command\n            this._execCommand(name, value);\n        }\n\n        // 修改菜单状态\n        editor.menus.changeActive();\n\n        // 最后，恢复选取保证光标在原来的位置闪烁\n        editor.selection.saveRange();\n        editor.selection.restoreSelection();\n\n        // 触发 onchange\n        editor.change && editor.change();\n    },\n\n    // 自定义 insertHTML 事件\n    _insertHTML: function _insertHTML(html) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (this.queryCommandSupported('insertHTML')) {\n            // W3C\n            this._execCommand('insertHTML', html);\n        } else if (range.insertNode) {\n            // IE\n            range.deleteContents();\n            range.insertNode($(html)[0]);\n        } else if (range.pasteHTML) {\n            // IE <= 10\n            range.pasteHTML(html);\n        }\n    },\n\n    // 插入 elem\n    _insertElem: function _insertElem($elem) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (range.insertNode) {\n            range.deleteContents();\n            range.insertNode($elem[0]);\n        }\n    },\n\n    // 封装 execCommand\n    _execCommand: function _execCommand(name, value) {\n        document.execCommand(name, false, value);\n    },\n\n    // 封装 document.queryCommandValue\n    queryCommandValue: function queryCommandValue(name) {\n        return document.queryCommandValue(name);\n    },\n\n    // 封装 document.queryCommandState\n    queryCommandState: function queryCommandState(name) {\n        return document.queryCommandState(name);\n    },\n\n    // 封装 document.queryCommandSupported\n    queryCommandSupported: function queryCommandSupported(name) {\n        return document.queryCommandSupported(name);\n    }\n};\n\n/*\n    selection range API\n*/\n\n// 构造函数\nfunction API(editor) {\n    this.editor = editor;\n    this._currentRange = null;\n}\n\n// 修改原型\nAPI.prototype = {\n    constructor: API,\n\n    // 获取 range 对象\n    getRange: function getRange() {\n        return this._currentRange;\n    },\n\n    // 保存选区\n    saveRange: function saveRange(_range) {\n        if (_range) {\n            // 保存已有选区\n            this._currentRange = _range;\n            return;\n        }\n\n        // 获取当前的选区\n        var selection = window.getSelection();\n        if (selection.rangeCount === 0) {\n            return;\n        }\n        var range = selection.getRangeAt(0);\n\n        // 判断选区内容是否在编辑内容之内\n        var $containerElem = this.getSelectionContainerElem(range);\n        if (!$containerElem) {\n            return;\n        }\n\n        // 判断选区内容是否在不可编辑区域之内\n        if ($containerElem.attr('contenteditable') === 'false' || $containerElem.parentUntil('[contenteditable=false]')) {\n            return;\n        }\n\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        if ($textElem.isContain($containerElem)) {\n            // 是编辑内容之内的\n            this._currentRange = range;\n        }\n    },\n\n    // 折叠选区\n    collapseRange: function collapseRange(toStart) {\n        if (toStart == null) {\n            // 默认为 false\n            toStart = false;\n        }\n        var range = this._currentRange;\n        if (range) {\n            range.collapse(toStart);\n        }\n    },\n\n    // 选中区域的文字\n    getSelectionText: function getSelectionText() {\n        var range = this._currentRange;\n        if (range) {\n            return this._currentRange.toString();\n        } else {\n            return '';\n        }\n    },\n\n    // 选区的 $Elem\n    getSelectionContainerElem: function getSelectionContainerElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.commonAncestorContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionStartElem: function getSelectionStartElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.startContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionEndElem: function getSelectionEndElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.endContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n\n    // 选区是否为空\n    isSelectionEmpty: function isSelectionEmpty() {\n        var range = this._currentRange;\n        if (range && range.startContainer) {\n            if (range.startContainer === range.endContainer) {\n                if (range.startOffset === range.endOffset) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    // 恢复选区\n    restoreSelection: function restoreSelection() {\n        var selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(this._currentRange);\n    },\n\n    // 创建一个空白（即 &#8203 字符）选区\n    createEmptyRange: function createEmptyRange() {\n        var editor = this.editor;\n        var range = this.getRange();\n        var $elem = void 0;\n\n        if (!range) {\n            // 当前无 range\n            return;\n        }\n        if (!this.isSelectionEmpty()) {\n            // 当前选区必须没有内容才可以\n            return;\n        }\n\n        try {\n            // 目前只支持 webkit 内核\n            if (UA.isWebkit()) {\n                // 插入 &#8203\n                editor.cmd.do('insertHTML', '&#8203;');\n                // 修改 offset 位置\n                range.setEnd(range.endContainer, range.endOffset + 1);\n                // 存储\n                this.saveRange(range);\n            } else {\n                $elem = $('<strong>&#8203;</strong>');\n                editor.cmd.do('insertElem', $elem);\n                this.createRangeByElem($elem, true);\n            }\n        } catch (ex) {\n            // 部分情况下会报错，兼容一下\n        }\n    },\n\n    // 根据 $Elem 设置选区\n    createRangeByElem: function createRangeByElem($elem, toStart, isContent) {\n        // $elem - 经过封装的 elem\n        // toStart - true 开始位置，false 结束位置\n        // isContent - 是否选中Elem的内容\n        if (!$elem.length) {\n            return;\n        }\n\n        var elem = $elem[0];\n        var range = document.createRange();\n\n        if (isContent) {\n            range.selectNodeContents(elem);\n        } else {\n            range.selectNode(elem);\n        }\n\n        if (typeof toStart === 'boolean') {\n            range.collapse(toStart);\n        }\n\n        // 存储 range\n        this.saveRange(range);\n    }\n};\n\n/*\n    上传进度条\n*/\n\nfunction Progress(editor) {\n    this.editor = editor;\n    this._time = 0;\n    this._isShow = false;\n    this._isRender = false;\n    this._timeoutId = 0;\n    this.$textContainer = editor.$textContainerElem;\n    this.$bar = $('<div class=\"w-e-progress\"></div>');\n}\n\nProgress.prototype = {\n    constructor: Progress,\n\n    show: function show(progress) {\n        var _this = this;\n\n        // 状态处理\n        if (this._isShow) {\n            return;\n        }\n        this._isShow = true;\n\n        // 渲染\n        var $bar = this.$bar;\n        if (!this._isRender) {\n            var $textContainer = this.$textContainer;\n            $textContainer.append($bar);\n        } else {\n            this._isRender = true;\n        }\n\n        // 改变进度（节流，100ms 渲染一次）\n        if (Date.now() - this._time > 100) {\n            if (progress <= 1) {\n                $bar.css('width', progress * 100 + '%');\n                this._time = Date.now();\n            }\n        }\n\n        // 隐藏\n        var timeoutId = this._timeoutId;\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(function () {\n            _this._hide();\n        }, 500);\n    },\n\n    _hide: function _hide() {\n        var $bar = this.$bar;\n        $bar.remove();\n\n        // 修改状态\n        this._time = 0;\n        this._isShow = false;\n        this._isRender = false;\n    }\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n/*\n    上传图片\n*/\n\n// 构造函数\nfunction UploadImg(editor) {\n    this.editor = editor;\n}\n\n// 原型\nUploadImg.prototype = {\n    constructor: UploadImg,\n\n    // 根据 debug 弹出不同的信息\n    _alert: function _alert(alertInfo, debugInfo) {\n        var editor = this.editor;\n        var debug = editor.config.debug;\n        var customAlert = editor.config.customAlert;\n\n        if (debug) {\n            throw new Error('wangEditor: ' + (debugInfo || alertInfo));\n        } else {\n            if (customAlert && typeof customAlert === 'function') {\n                customAlert(alertInfo);\n            } else {\n                alert(alertInfo);\n            }\n        }\n    },\n\n    // 根据链接插入图片\n    insertLinkImg: function insertLinkImg(link) {\n        var _this2 = this;\n\n        if (!link) {\n            return;\n        }\n        var editor = this.editor;\n        var config = editor.config;\n\n        // 校验格式\n        var linkImgCheck = config.linkImgCheck;\n        var checkResult = void 0;\n        if (linkImgCheck && typeof linkImgCheck === 'function') {\n            checkResult = linkImgCheck(link);\n            if (typeof checkResult === 'string') {\n                // 校验失败，提示信息\n                alert(checkResult);\n                return;\n            }\n        }\n\n        editor.cmd.do('insertHTML', '<img src=\"' + link + '\" style=\"max-width:100%;\"/>');\n\n        // 验证图片 url 是否有效，无效的话给出提示\n        var img = document.createElement('img');\n        img.onload = function () {\n            var callback = config.linkImgCallback;\n            if (callback && typeof callback === 'function') {\n                callback(link);\n            }\n\n            img = null;\n        };\n        img.onerror = function () {\n            img = null;\n            // 无法成功下载图片\n            _this2._alert('插入图片错误', 'wangEditor: \\u63D2\\u5165\\u56FE\\u7247\\u51FA\\u9519\\uFF0C\\u56FE\\u7247\\u94FE\\u63A5\\u662F \"' + link + '\"\\uFF0C\\u4E0B\\u8F7D\\u8BE5\\u94FE\\u63A5\\u5931\\u8D25');\n            return;\n        };\n        img.onabort = function () {\n            img = null;\n        };\n        img.src = link;\n    },\n\n    // 上传图片\n    uploadImg: function uploadImg(files) {\n        var _this3 = this;\n\n        if (!files || !files.length) {\n            return;\n        }\n\n        // ------------------------------ 获取配置信息 ------------------------------\n        var editor = this.editor;\n        var config = editor.config;\n        var uploadImgServer = config.uploadImgServer;\n        var uploadImgShowBase64 = config.uploadImgShowBase64;\n\n        var maxSize = config.uploadImgMaxSize;\n        var maxSizeM = maxSize / 1024 / 1024;\n        var maxLength = config.uploadImgMaxLength || 10000;\n        var uploadFileName = config.uploadFileName || '';\n        var uploadImgParams = config.uploadImgParams || {};\n        var uploadImgParamsWithUrl = config.uploadImgParamsWithUrl;\n        var uploadImgHeaders = config.uploadImgHeaders || {};\n        var hooks = config.uploadImgHooks || {};\n        var timeout = config.uploadImgTimeout || 3000;\n        var withCredentials = config.withCredentials;\n        if (withCredentials == null) {\n            withCredentials = false;\n        }\n        var customUploadImg = config.customUploadImg;\n\n        if (!customUploadImg) {\n            // 没有 customUploadImg 的情况下，需要如下两个配置才能继续进行图片上传\n            if (!uploadImgServer && !uploadImgShowBase64) {\n                return;\n            }\n        }\n\n        // ------------------------------ 验证文件信息 ------------------------------\n        var resultFiles = [];\n        var errInfo = [];\n        arrForEach(files, function (file) {\n            var name = file.name;\n            var size = file.size;\n\n            // chrome 低版本 name === undefined\n            if (!name || !size) {\n                return;\n            }\n\n            if (/\\.(jpg|jpeg|png|bmp|gif|webp)$/i.test(name) === false) {\n                // 后缀名不合法，不是图片\n                errInfo.push('\\u3010' + name + '\\u3011\\u4E0D\\u662F\\u56FE\\u7247');\n                return;\n            }\n            if (maxSize < size) {\n                // 上传图片过大\n                errInfo.push('\\u3010' + name + '\\u3011\\u5927\\u4E8E ' + maxSizeM + 'M');\n                return;\n            }\n\n            // 验证通过的加入结果列表\n            resultFiles.push(file);\n        });\n        // 抛出验证信息\n        if (errInfo.length) {\n            this._alert('图片验证未通过: \\n' + errInfo.join('\\n'));\n            return;\n        }\n        if (resultFiles.length > maxLength) {\n            this._alert('一次最多上传' + maxLength + '张图片');\n            return;\n        }\n\n        // ------------------------------ 自定义上传 ------------------------------\n        if (customUploadImg && typeof customUploadImg === 'function') {\n            customUploadImg(resultFiles, this.insertLinkImg.bind(this));\n\n            // 阻止以下代码执行\n            return;\n        }\n\n        // 添加图片数据\n        var formdata = new FormData();\n        arrForEach(resultFiles, function (file) {\n            var name = uploadFileName || file.name;\n            formdata.append(name, file);\n        });\n\n        // ------------------------------ 上传图片 ------------------------------\n        if (uploadImgServer && typeof uploadImgServer === 'string') {\n            // 添加参数\n            var uploadImgServerArr = uploadImgServer.split('#');\n            uploadImgServer = uploadImgServerArr[0];\n            var uploadImgServerHash = uploadImgServerArr[1] || '';\n            objForEach(uploadImgParams, function (key, val) {\n                // 因使用者反应，自定义参数不能默认 encode ，由 v3.1.1 版本开始注释掉\n                // val = encodeURIComponent(val)\n\n                // 第一，将参数拼接到 url 中\n                if (uploadImgParamsWithUrl) {\n                    if (uploadImgServer.indexOf('?') > 0) {\n                        uploadImgServer += '&';\n                    } else {\n                        uploadImgServer += '?';\n                    }\n                    uploadImgServer = uploadImgServer + key + '=' + val;\n                }\n\n                // 第二，将参数添加到 formdata 中\n                formdata.append(key, val);\n            });\n            if (uploadImgServerHash) {\n                uploadImgServer += '#' + uploadImgServerHash;\n            }\n\n            // 定义 xhr\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', uploadImgServer);\n\n            // 设置超时\n            xhr.timeout = timeout;\n            xhr.ontimeout = function () {\n                // hook - timeout\n                if (hooks.timeout && typeof hooks.timeout === 'function') {\n                    hooks.timeout(xhr, editor);\n                }\n\n                _this3._alert('上传图片超时');\n            };\n\n            // 监控 progress\n            if (xhr.upload) {\n                xhr.upload.onprogress = function (e) {\n                    var percent = void 0;\n                    // 进度条\n                    var progressBar = new Progress(editor);\n                    if (e.lengthComputable) {\n                        percent = e.loaded / e.total;\n                        progressBar.show(percent);\n                    }\n                };\n            }\n\n            // 返回数据\n            xhr.onreadystatechange = function () {\n                var result = void 0;\n                if (xhr.readyState === 4) {\n                    if (xhr.status < 200 || xhr.status >= 300) {\n                        // hook - error\n                        if (hooks.error && typeof hooks.error === 'function') {\n                            hooks.error(xhr, editor);\n                        }\n\n                        // xhr 返回状态错误\n                        _this3._alert('上传图片发生错误', '\\u4E0A\\u4F20\\u56FE\\u7247\\u53D1\\u751F\\u9519\\u8BEF\\uFF0C\\u670D\\u52A1\\u5668\\u8FD4\\u56DE\\u72B6\\u6001\\u662F ' + xhr.status);\n                        return;\n                    }\n\n                    result = xhr.responseText;\n                    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {\n                        try {\n                            result = JSON.parse(result);\n                        } catch (ex) {\n                            // hook - fail\n                            if (hooks.fail && typeof hooks.fail === 'function') {\n                                hooks.fail(xhr, editor, result);\n                            }\n\n                            _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果是: ' + result);\n                            return;\n                        }\n                    }\n                    if (!hooks.customInsert && result.errno != '0') {\n                        // hook - fail\n                        if (hooks.fail && typeof hooks.fail === 'function') {\n                            hooks.fail(xhr, editor, result);\n                        }\n\n                        // 数据错误\n                        _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果 errno=' + result.errno);\n                    } else {\n                        if (hooks.customInsert && typeof hooks.customInsert === 'function') {\n                            // 使用者自定义插入方法\n                            hooks.customInsert(_this3.insertLinkImg.bind(_this3), result, editor);\n                        } else {\n                            // 将图片插入编辑器\n                            var data = result.data || [];\n                            data.forEach(function (link) {\n                                _this3.insertLinkImg(link);\n                            });\n                        }\n\n                        // hook - success\n                        if (hooks.success && typeof hooks.success === 'function') {\n                            hooks.success(xhr, editor, result);\n                        }\n                    }\n                }\n            };\n\n            // hook - before\n            if (hooks.before && typeof hooks.before === 'function') {\n                var beforeResult = hooks.before(xhr, editor, resultFiles);\n                if (beforeResult && (typeof beforeResult === 'undefined' ? 'undefined' : _typeof(beforeResult)) === 'object') {\n                    if (beforeResult.prevent) {\n                        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n                        this._alert(beforeResult.msg);\n                        return;\n                    }\n                }\n            }\n\n            // 自定义 headers\n            objForEach(uploadImgHeaders, function (key, val) {\n                xhr.setRequestHeader(key, val);\n            });\n\n            // 跨域传 cookie\n            xhr.withCredentials = withCredentials;\n\n            // 发送请求\n            xhr.send(formdata);\n\n            // 注意，要 return 。不去操作接下来的 base64 显示方式\n            return;\n        }\n\n        // ------------------------------ 显示 base64 格式 ------------------------------\n        if (uploadImgShowBase64) {\n            arrForEach(files, function (file) {\n                var _this = _this3;\n                var reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = function () {\n                    _this.insertLinkImg(this.result);\n                };\n            });\n        }\n    }\n};\n\n/*\n    编辑器构造函数\n*/\n\n// id，累加\nvar editorId = 1;\n\n// 构造函数\nfunction Editor(toolbarSelector, textSelector) {\n    if (toolbarSelector == null) {\n        // 没有传入任何参数，报错\n        throw new Error('错误：初始化编辑器时候未传入任何参数，请查阅文档');\n    }\n    // id，用以区分单个页面不同的编辑器对象\n    this.id = 'wangEditor-' + editorId++;\n\n    this.toolbarSelector = toolbarSelector;\n    this.textSelector = textSelector;\n\n    // 自定义配置\n    this.customConfig = {};\n}\n\n// 修改原型\nEditor.prototype = {\n    constructor: Editor,\n\n    // 初始化配置\n    _initConfig: function _initConfig() {\n        // _config 是默认配置，this.customConfig 是用户自定义配置，将它们 merge 之后再赋值\n        var target = {};\n        this.config = Object.assign(target, config, this.customConfig);\n\n        // 将语言配置，生成正则表达式\n        var langConfig = this.config.lang || {};\n        var langArgs = [];\n        objForEach(langConfig, function (key, val) {\n            // key 即需要生成正则表达式的规则，如“插入链接”\n            // val 即需要被替换成的语言，如“insert link”\n            langArgs.push({\n                reg: new RegExp(key, 'img'),\n                val: val\n\n            });\n        });\n        this.config.langArgs = langArgs;\n    },\n\n    // 初始化 DOM\n    _initDom: function _initDom() {\n        var _this = this;\n\n        var toolbarSelector = this.toolbarSelector;\n        var $toolbarSelector = $(toolbarSelector);\n        var textSelector = this.textSelector;\n\n        var config$$1 = this.config;\n        var zIndex = config$$1.zIndex;\n\n        // 定义变量\n        var $toolbarElem = void 0,\n            $textContainerElem = void 0,\n            $textElem = void 0,\n            $children = void 0;\n\n        if (textSelector == null) {\n            // 只传入一个参数，即是容器的选择器或元素，toolbar 和 text 的元素自行创建\n            $toolbarElem = $('<div></div>');\n            $textContainerElem = $('<div></div>');\n\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $toolbarSelector.children();\n\n            // 添加到 DOM 结构中\n            $toolbarSelector.append($toolbarElem).append($textContainerElem);\n\n            // 自行创建的，需要配置默认的样式\n            $toolbarElem.css('background-color', '#f1f1f1').css('border', '1px solid #ccc');\n            $textContainerElem.css('border', '1px solid #ccc').css('border-top', 'none').css('height', '300px');\n        } else {\n            // toolbar 和 text 的选择器都有值，记录属性\n            $toolbarElem = $toolbarSelector;\n            $textContainerElem = $(textSelector);\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $textContainerElem.children();\n        }\n\n        // 编辑区域\n        $textElem = $('<div></div>');\n        $textElem.attr('contenteditable', 'true').css('width', '100%').css('height', '100%');\n\n        // 初始化编辑区域内容\n        if ($children && $children.length) {\n            $textElem.append($children);\n        } else {\n            $textElem.append($('<p><br></p>'));\n        }\n\n        // 编辑区域加入DOM\n        $textContainerElem.append($textElem);\n\n        // 设置通用的 class\n        $toolbarElem.addClass('w-e-toolbar');\n        $textContainerElem.addClass('w-e-text-container');\n        $textContainerElem.css('z-index', zIndex);\n        $textElem.addClass('w-e-text');\n\n        // 添加 ID\n        var toolbarElemId = getRandom('toolbar-elem');\n        $toolbarElem.attr('id', toolbarElemId);\n        var textElemId = getRandom('text-elem');\n        $textElem.attr('id', textElemId);\n\n        // 记录属性\n        this.$toolbarElem = $toolbarElem;\n        this.$textContainerElem = $textContainerElem;\n        this.$textElem = $textElem;\n        this.toolbarElemId = toolbarElemId;\n        this.textElemId = textElemId;\n\n        // 记录输入法的开始和结束\n        var compositionEnd = true;\n        $textContainerElem.on('compositionstart', function () {\n            // 输入法开始输入\n            compositionEnd = false;\n        });\n        $textContainerElem.on('compositionend', function () {\n            // 输入法结束输入\n            compositionEnd = true;\n        });\n\n        // 绑定 onchange\n        $textContainerElem.on('click keyup', function () {\n            // 输入法结束才出发 onchange\n            compositionEnd && _this.change && _this.change();\n        });\n        $toolbarElem.on('click', function () {\n            this.change && this.change();\n        });\n\n        //绑定 onfocus 与 onblur 事件\n        if (config$$1.onfocus || config$$1.onblur) {\n            // 当前编辑器是否是焦点状态\n            this.isFocus = false;\n\n            $(document).on('click', function (e) {\n                //判断当前点击元素是否在编辑器内\n                var isChild = $textElem.isContain($(e.target));\n\n                //判断当前点击元素是否为工具栏\n                var isToolbar = $toolbarElem.isContain($(e.target));\n                var isMenu = $toolbarElem[0] == e.target ? true : false;\n\n                if (!isChild) {\n                    //若为选择工具栏中的功能，则不视为成blur操作\n                    if (isToolbar && !isMenu) {\n                        return;\n                    }\n\n                    if (_this.isFocus) {\n                        _this.onblur && _this.onblur();\n                    }\n                    _this.isFocus = false;\n                } else {\n                    if (!_this.isFocus) {\n                        _this.onfocus && _this.onfocus();\n                    }\n                    _this.isFocus = true;\n                }\n            });\n        }\n    },\n\n    // 封装 command\n    _initCommand: function _initCommand() {\n        this.cmd = new Command(this);\n    },\n\n    // 封装 selection range API\n    _initSelectionAPI: function _initSelectionAPI() {\n        this.selection = new API(this);\n    },\n\n    // 添加图片上传\n    _initUploadImg: function _initUploadImg() {\n        this.uploadImg = new UploadImg(this);\n    },\n\n    // 初始化菜单\n    _initMenus: function _initMenus() {\n        this.menus = new Menus(this);\n        this.menus.init();\n    },\n\n    // 添加 text 区域\n    _initText: function _initText() {\n        this.txt = new Text(this);\n        this.txt.init();\n    },\n\n    // 初始化选区，将光标定位到内容尾部\n    initSelection: function initSelection(newLine) {\n        var $textElem = this.$textElem;\n        var $children = $textElem.children();\n        if (!$children.length) {\n            // 如果编辑器区域无内容，添加一个空行，重新设置选区\n            $textElem.append($('<p><br></p>'));\n            this.initSelection();\n            return;\n        }\n\n        var $last = $children.last();\n\n        if (newLine) {\n            // 新增一个空行\n            var html = $last.html().toLowerCase();\n            var nodeName = $last.getNodeName();\n            if (html !== '<br>' && html !== '<br\\/>' || nodeName !== 'P') {\n                // 最后一个元素不是 <p><br></p>，添加一个空行，重新设置选区\n                $textElem.append($('<p><br></p>'));\n                this.initSelection();\n                return;\n            }\n        }\n\n        this.selection.createRangeByElem($last, false, true);\n        this.selection.restoreSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // -------- 绑定 onchange 事件 --------\n        var onChangeTimeoutId = 0;\n        var beforeChangeHtml = this.txt.html();\n        var config$$1 = this.config;\n\n        // onchange 触发延迟时间\n        var onchangeTimeout = config$$1.onchangeTimeout;\n        onchangeTimeout = parseInt(onchangeTimeout, 10);\n        if (!onchangeTimeout || onchangeTimeout <= 0) {\n            onchangeTimeout = 200;\n        }\n\n        var onchange = config$$1.onchange;\n        if (onchange && typeof onchange === 'function') {\n            // 触发 change 的有三个场景：\n            // 1. $textContainerElem.on('click keyup')\n            // 2. $toolbarElem.on('click')\n            // 3. editor.cmd.do()\n            this.change = function () {\n                // 判断是否有变化\n                var currentHtml = this.txt.html();\n\n                if (currentHtml.length === beforeChangeHtml.length) {\n                    // 需要比较每一个字符\n                    if (currentHtml === beforeChangeHtml) {\n                        return;\n                    }\n                }\n\n                // 执行，使用节流\n                if (onChangeTimeoutId) {\n                    clearTimeout(onChangeTimeoutId);\n                }\n                onChangeTimeoutId = setTimeout(function () {\n                    // 触发配置的 onchange 函数\n                    onchange(currentHtml);\n                    beforeChangeHtml = currentHtml;\n                }, onchangeTimeout);\n            };\n        }\n\n        // -------- 绑定 onblur 事件 --------\n        var onblur = config$$1.onblur;\n        if (onblur && typeof onblur === 'function') {\n            this.onblur = function () {\n                var currentHtml = this.txt.html();\n                onblur(currentHtml);\n            };\n        }\n\n        // -------- 绑定 onfocus 事件 --------\n        var onfocus = config$$1.onfocus;\n        if (onfocus && typeof onfocus === 'function') {\n            this.onfocus = function () {\n                onfocus();\n            };\n        }\n    },\n\n    // 创建编辑器\n    create: function create() {\n        // 初始化配置信息\n        this._initConfig();\n\n        // 初始化 DOM\n        this._initDom();\n\n        // 封装 command API\n        this._initCommand();\n\n        // 封装 selection range API\n        this._initSelectionAPI();\n\n        // 添加 text\n        this._initText();\n\n        // 初始化菜单\n        this._initMenus();\n\n        // 添加 图片上传\n        this._initUploadImg();\n\n        // 初始化选区，将光标定位到内容尾部\n        this.initSelection(true);\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 解绑所有事件（暂时不对外开放）\n    _offAllEvent: function _offAllEvent() {\n        $.offAll();\n    }\n};\n\n// 检验是否浏览器环境\ntry {\n    document;\n} catch (ex) {\n    throw new Error('请在浏览器环境下运行');\n}\n\n// polyfill\npolyfill();\n\n// 这里的 `inlinecss` 将被替换成 css 代码的内容，详情可去 ./gulpfile.js 中搜索 `inlinecss` 关键字\nvar inlinecss = '.w-e-toolbar,.w-e-text-container,.w-e-menu-panel {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-toolbar *,.w-e-text-container *,.w-e-menu-panel * {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-clear-fix:after {  content: \"\";  display: table;  clear: both;}.w-e-toolbar .w-e-droplist {  position: absolute;  left: 0;  top: 0;  background-color: #fff;  border: 1px solid #f1f1f1;  border-right-color: #ccc;  border-bottom-color: #ccc;}.w-e-toolbar .w-e-droplist .w-e-dp-title {  text-align: center;  color: #999;  line-height: 2;  border-bottom: 1px solid #f1f1f1;  font-size: 13px;}.w-e-toolbar .w-e-droplist ul.w-e-list {  list-style: none;  line-height: 1;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item {  color: #333;  padding: 5px 0;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item:hover {  background-color: #f1f1f1;}.w-e-toolbar .w-e-droplist ul.w-e-block {  list-style: none;  text-align: left;  padding: 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item {  display: inline-block;  *display: inline;  *zoom: 1;  padding: 3px 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item:hover {  background-color: #f1f1f1;}@font-face {  font-family: \\'w-e-icon\\';  src: url(data:application/x-font-woff;charset=utf-8;base64,) format(\\'truetype\\');  font-weight: normal;  font-style: normal;}[class^=\"w-e-icon-\"],[class*=\" w-e-icon-\"] {  /* use !important to prevent issues with browser extensions that change fonts */  font-family: \\'w-e-icon\\' !important;  speak: none;  font-style: normal;  font-weight: normal;  font-variant: normal;  text-transform: none;  line-height: 1;  /* Better Font Rendering =========== */  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.w-e-icon-close:before {  content: \"\\\\f00d\";}.w-e-icon-upload2:before {  content: \"\\\\e9c6\";}.w-e-icon-trash-o:before {  content: \"\\\\f014\";}.w-e-icon-header:before {  content: \"\\\\f1dc\";}.w-e-icon-pencil2:before {  content: \"\\\\e906\";}.w-e-icon-paint-brush:before {  content: \"\\\\f1fc\";}.w-e-icon-image:before {  content: \"\\\\e90d\";}.w-e-icon-play:before {  content: \"\\\\e912\";}.w-e-icon-location:before {  content: \"\\\\e947\";}.w-e-icon-undo:before {  content: \"\\\\e965\";}.w-e-icon-redo:before {  content: \"\\\\e966\";}.w-e-icon-quotes-left:before {  content: \"\\\\e977\";}.w-e-icon-list-numbered:before {  content: \"\\\\e9b9\";}.w-e-icon-list2:before {  content: \"\\\\e9bb\";}.w-e-icon-link:before {  content: \"\\\\e9cb\";}.w-e-icon-happy:before {  content: \"\\\\e9df\";}.w-e-icon-bold:before {  content: \"\\\\ea62\";}.w-e-icon-underline:before {  content: \"\\\\ea63\";}.w-e-icon-italic:before {  content: \"\\\\ea64\";}.w-e-icon-strikethrough:before {  content: \"\\\\ea65\";}.w-e-icon-table2:before {  content: \"\\\\ea71\";}.w-e-icon-paragraph-left:before {  content: \"\\\\ea77\";}.w-e-icon-paragraph-center:before {  content: \"\\\\ea78\";}.w-e-icon-paragraph-right:before {  content: \"\\\\ea79\";}.w-e-icon-terminal:before {  content: \"\\\\f120\";}.w-e-icon-page-break:before {  content: \"\\\\ea68\";}.w-e-icon-cancel-circle:before {  content: \"\\\\ea0d\";}.w-e-icon-font:before {  content: \"\\\\ea5c\";}.w-e-icon-text-heigh:before {  content: \"\\\\ea5f\";}.w-e-toolbar {  display: -webkit-box;  display: -ms-flexbox;  display: flex;  padding: 0 5px;  /* flex-wrap: wrap; */  /* 单个菜单 */}.w-e-toolbar .w-e-menu {  position: relative;  text-align: center;  padding: 5px 10px;  cursor: pointer;}.w-e-toolbar .w-e-menu i {  color: #999;}.w-e-toolbar .w-e-menu:hover i {  color: #333;}.w-e-toolbar .w-e-active i {  color: #1e88e5;}.w-e-toolbar .w-e-active:hover i {  color: #1e88e5;}.w-e-text-container .w-e-panel-container {  position: absolute;  top: 0;  left: 50%;  border: 1px solid #ccc;  border-top: 0;  box-shadow: 1px 1px 2px #ccc;  color: #333;  background-color: #fff;  /* 为 emotion panel 定制的样式 */  /* 上传图片的 panel 定制样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-close {  position: absolute;  right: 0;  top: 0;  padding: 5px;  margin: 2px 5px 0 0;  cursor: pointer;  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-close:hover {  color: #333;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title {  list-style: none;  display: -webkit-box;  display: -ms-flexbox;  display: flex;  font-size: 14px;  margin: 2px 10px 0 10px;  border-bottom: 1px solid #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-item {  padding: 3px 5px;  color: #999;  cursor: pointer;  margin: 0 3px;  position: relative;  top: 1px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-active {  color: #333;  border-bottom: 1px solid #333;  cursor: default;  font-weight: 700;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content {  padding: 10px 15px 10px 15px;  font-size: 16px;  /* 输入框的样式 */  /* 按钮的样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content button:focus {  outline: none;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea {  width: 100%;  border: 1px solid #ccc;  padding: 5px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus {  border-color: #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text] {  border: none;  border-bottom: 1px solid #ccc;  font-size: 14px;  height: 20px;  color: #333;  text-align: left;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].small {  width: 30px;  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].block {  display: block;  width: 100%;  margin: 10px 0;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text]:focus {  border-bottom: 2px solid #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button {  font-size: 14px;  color: #1e88e5;  border: none;  padding: 5px 10px;  background-color: #fff;  cursor: pointer;  border-radius: 3px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.left {  float: left;  margin-right: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.right {  float: right;  margin-left: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.gray {  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.red {  color: #c24f4a;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button:hover {  background-color: #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container:after {  content: \"\";  display: table;  clear: both;}.w-e-text-container .w-e-panel-container .w-e-emoticon-container .w-e-item {  cursor: pointer;  font-size: 18px;  padding: 0 3px;  display: inline-block;  *display: inline;  *zoom: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container {  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn {  display: inline-block;  *display: inline;  *zoom: 1;  color: #999;  cursor: pointer;  font-size: 60px;  line-height: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn:hover {  color: #333;}.w-e-text-container {  position: relative;}.w-e-text-container .w-e-progress {  position: absolute;  background-color: #1e88e5;  bottom: 0;  left: 0;  height: 1px;}.w-e-text {  padding: 0 10px;  overflow-y: scroll;}.w-e-text p,.w-e-text h1,.w-e-text h2,.w-e-text h3,.w-e-text h4,.w-e-text h5,.w-e-text table,.w-e-text pre {  margin: 10px 0;  line-height: 1.5;}.w-e-text ul,.w-e-text ol {  margin: 10px 0 10px 20px;}.w-e-text blockquote {  display: block;  border-left: 8px solid #d0e5f2;  padding: 5px 10px;  margin: 10px 0;  line-height: 1.4;  font-size: 100%;  background-color: #f1f1f1;}.w-e-text code {  display: inline-block;  *display: inline;  *zoom: 1;  background-color: #f1f1f1;  border-radius: 3px;  padding: 3px 5px;  margin: 0 3px;}.w-e-text pre code {  display: block;}.w-e-text table {  border-top: 1px solid #ccc;  border-left: 1px solid #ccc;}.w-e-text table td,.w-e-text table th {  border-bottom: 1px solid #ccc;  border-right: 1px solid #ccc;  padding: 3px 5px;}.w-e-text table th {  border-bottom: 2px solid #ccc;  text-align: center;}.w-e-text:focus {  outline: none;}.w-e-text img {  cursor: pointer;}.w-e-text img:hover {  box-shadow: 0 0 5px #333;}';\n\n// 将 css 代码添加到 <style> 中\nvar style = document.createElement('style');\nstyle.type = 'text/css';\nstyle.innerHTML = inlinecss;\ndocument.getElementsByTagName('HEAD').item(0).appendChild(style);\n\n// 返回\nvar index = window.wangEditor || Editor;\n\nreturn index;\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/wangeditor/release/wangEditor.js\n// module id = sYY+\n// module chunks = 9"],"sourceRoot":""}